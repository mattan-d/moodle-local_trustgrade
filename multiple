// amd/src/trustgrade.js
define(['jquery', 'core/ajax'], function($, Ajax) {
    var trustgrade = {
        getIntroEditorItemId: function() {
            // Implementation to get intro editor itemid
            return 123; // Example value
        },
        getIntroAttachmentsItemId: function() {
            // Implementation to get intro attachments itemid
            return 456; // Example value
        },
        generateQuestions: function(cmid, instructions) {
            var promises = Ajax.call([
                {
                    methodname: "local_trustgrade_generate_questions",
                    args: {
                        cmid: cmid,
                        instructions: instructions,
                        intro_itemid: trustgrade.getIntroEditorItemId(),
                        intro_attachments_itemid: trustgrade.getIntroAttachmentsItemId(),
                    },
                },
            ]);

            return promises;
        },
        // Other methods and properties
    };

    return trustgrade;
});

// classes/external.php
namespace local_trustgrade;

use core_external\external_function_parameters;
use core_external\external_value;

class external extends \external_api {
    public static function generate_questions_parameters() {
        return new \external_function_parameters([
            'cmid' => new \external_value(PARAM_INT, 'Course module ID'),
            'instructions' => new \external_value(PARAM_RAW, 'Assignment instructions'),
            'intro_itemid' => new \external_value(PARAM_INT, 'Draft itemid for intro editor files', VALUE_DEFAULT, 0),
            'intro_attachments_itemid' => new \external_value(PARAM_INT, 'Draft itemid for intro attachments filemanager', VALUE_DEFAULT, 0),
        ]);
    }

    public static function generate_questions($cmid, $instructions, $intro_itemid = 0, $intro_attachments_itemid = 0) {
        self::validate_editing_context($cmid);
        $instructions = strip_tags(trim((string) $instructions));
        if (empty($instructions)) {
            return ['success' => false, 'error' => get_string('no_instructions', 'local_trustgrade')];
        }

        // Append a concise attachments summary (from intro editor and intro filemanager) to give the generator context.
        // We reuse the existing helper to avoid duplicating logic.
        $attachmentSummary = self::collect_intro_attachments_text((int)$intro_itemid, (int)$intro_attachments_itemid);
        $combinedInstructions = $instructions;
        if (!empty($attachmentSummary)) {
            $combinedInstructions .= "\n\n[Attachments]\n" . $attachmentSummary;
        }

        $quiz_settings = quiz_settings::get_settings($cmid);
        $questions_to_generate = $quiz_settings['questions_to_generate'];
        $result = question_generator::generate_questions_with_count($combinedInstructions, $questions_to_generate);
        if ($result['success']) {
            $save_success = question_generator::save_questions($cmid, $result['questions']);
            if ($save_success) {
                $result['message'] = get_string('questions_generated_success', 'local_trustgrade');
                $result['questions'] = json_encode($result['questions']);
            } else {
                $result['error'] = get_string('error_saving_questions', 'local_trustgrade');
                $result['success'] = false;
            }
        } else {
            $result['error'] = $result['error'];
            $result['success'] = false;
        }
        return $result;
    }

    private static function collect_intro_attachments_text($intro_itemid, $intro_attachments_itemid) {
        // Implementation to collect intro attachments text
        return "Attachment summary text"; // Example value
    }

    private static function validate_editing_context($cmid) {
        // Implementation to validate editing context
    }
}
