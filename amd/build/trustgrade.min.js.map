{"version":3,"file":"trustgrade.min.js","sources":["../src/trustgrade.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n\nvar define = window.define // Declare define variable\nvar M = window.M // Declare M variable\nvar tinyMCE = window.tinyMCE // Declare tinyMCE variable\n\ndefine([\"jquery\", \"core/ajax\", \"core/notification\", \"core/str\", \"core/modal_factory\"], (\n  $,\n  Ajax,\n  Notification,\n  Str,\n  ModalFactory,\n) => {\n  var trustgrade = {\n    init: function () {\n      this.bindEvents()\n      this.loadQuestionBank() // Load existing questions on page load\n    },\n\n    bindEvents: () => {\n      $(document).on(\"click\", \"#check-instructions-btn\", (e) => {\n        e.preventDefault()\n        trustgrade.checkInstructions()\n      })\n      $(document).on(\"click\", \"#generate-questions-btn\", (e) => {\n        e.preventDefault()\n        trustgrade.generateQuestions()\n      })\n      $(document).on(\"change\", \"#id_trustgrade_questions_to_generate\", (e) => {\n        e.preventDefault()\n        trustgrade.updateSingleQuizSetting(\"questions_to_generate\", $(e.target).val())\n      })\n    },\n\n    showErrorModal: (title, message) => {\n      ModalFactory.create({\n        type: ModalFactory.types.ALERT,\n        title: title,\n        body: message,\n      }).then((modal) => modal.show())\n    },\n\n    showSuccessNotification: (message) => {\n      Notification.addNotification({ message: message, type: \"success\" })\n    },\n\n    updateSingleQuizSetting: function (settingName, settingValue) {\n      var cmid = this.getCourseModuleId()\n      if (cmid <= 0) return\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_update_quiz_setting\",\n          args: {\n            cmid: cmid,\n            setting_name: settingName,\n            setting_value: settingValue,\n          },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            Str.get_string(\"setting_updated_success\", \"local_trustgrade\", {\n              setting: settingName.replace(/_/g, \" \"),\n            }).then((message) => {\n              trustgrade.showSuccessNotification(message)\n            })\n          } else {\n            Str.get_string(\"setting_update_error\", \"local_trustgrade\").then((title) => {\n              trustgrade.showErrorModal(title, response.error || \"An error occurred while updating the setting.\")\n            })\n          }\n        })\n        .fail(Notification.exception)\n    },\n\n    /**\n     * Basic HTML escape to avoid XSS in rendered content.\n     */\n    escapeHtml: (value) => {\n      if (value === null || value === undefined) return \"\"\n      return String(value).replace(/[&<>\"']/g, (s) => {\n        const map = { \"&\": \"&amp;\", \"<\": \"&lt;\", \">\": \"&gt;\", '\"': \"&quot;\", \"'\": \"&#39;\" }\n        return map[s] || s\n      })\n    },\n\n    /**\n     * Render the recommendation which may be either:\n     * - a JSON object in the format provided by the backend, or\n     * - a string (legacy), which we render as paragraph lines with <br>.\n     */\n    renderRecommendation: (recommendation) => {\n      // Legacy string fallback\n      if (typeof recommendation === \"string\") {\n        return recommendation.replace(/\\n/g, \"<br>\")\n      }\n\n      // If it's not an object, stringify and fallback to legacy behavior\n      if (!recommendation || typeof recommendation !== \"object\") {\n        try {\n          const txt = JSON.stringify(recommendation, null, 2)\n          return trustgrade.escapeHtml(txt).replace(/\\n/g, \"<br>\")\n        } catch (e) {\n          return \"\"\n        }\n      }\n\n      // Expected structure:\n      // {\n      //   \"table\": { \"title\": \"\", \"rows\": [{ \"Criterion\": \"\", \"Met\": \"\", \"Suggestions\": \"\" }] },\n      //   \"EvaluationText\": { \"content\": \"\" },\n      //   \"ImprovedAssignment\": { \"content\": \"\" }\n      // }\n\n      const table = recommendation.table || {}\n      const rows = Array.isArray(table.rows) ? table.rows : []\n      const tableTitle = table.title || \"Criteria Evaluation\"\n\n      const evalText =\n        recommendation.EvaluationText && recommendation.EvaluationText.content\n          ? String(recommendation.EvaluationText.content)\n          : \"\"\n      const improved =\n        recommendation.ImprovedAssignment && recommendation.ImprovedAssignment.content\n          ? String(recommendation.ImprovedAssignment.content)\n          : \"\"\n\n      let html = \"\"\n\n      // Table section\n      html += `<div class=\"tg-section tg-table-section\" style=\"margin-bottom:16px;\">`\n      if (tableTitle) {\n        html += `<h4 style=\"margin:0 0 8px 0;\">${trustgrade.escapeHtml(tableTitle)}</h4>`\n      }\n      html += `\n        <div class=\"table-responsive\">\n          <table class=\"generaltable boxaligncenter\" style=\"width:100%; border-collapse:collapse;\">\n            <thead>\n              <tr>\n                <th style=\"text-align:left; border-bottom:1px solid #ddd; padding:8px;\">${trustgrade.escapeHtml(\n                  \"Criterion\",\n                )}</th>\n                <th style=\"text-align:left; border-bottom:1px solid #ddd; padding:8px;\">${trustgrade.escapeHtml(\n                  \"Met\",\n                )}</th>\n                <th style=\"text-align:left; border-bottom:1px solid #ddd; padding:8px;\">${trustgrade.escapeHtml(\n                  \"Suggestions\",\n                )}</th>\n              </tr>\n            </thead>\n            <tbody>\n      `\n      if (rows.length > 0) {\n        rows.forEach((r) => {\n          const c = trustgrade.escapeHtml(r[\"Criterion\"] ?? \"\")\n          const m = trustgrade.escapeHtml(r[\"Met\"] ?? r[\"Met (y/n)\"] ?? \"\")\n          const s = trustgrade.escapeHtml(r[\"Suggestions\"] ?? \"\")\n          html += `\n              <tr>\n                <td style=\"vertical-align:top; border-bottom:1px solid #eee; padding:8px;\">${c}</td>\n                <td style=\"vertical-align:top; border-bottom:1px solid #eee; padding:8px;\">${m}</td>\n                <td style=\"vertical-align:top; border-bottom:1px solid #eee; padding:8px;\">${s}</td>\n              </tr>\n          `\n        })\n      } else {\n        html += `\n              <tr>\n                <td colspan=\"3\" style=\"padding:8px; color:#666;\">${trustgrade.escapeHtml(\"No criteria provided.\")}</td>\n              </tr>\n        `\n      }\n      html += `\n            </tbody>\n          </table>\n        </div>\n      </div>\n      `\n\n      // Evaluation Text section\n      html += `<div class=\"tg-section tg-eval-text\" style=\"margin-bottom:16px;\">`\n      html += `<h4 style=\"margin:0 0 8px 0;\">${trustgrade.escapeHtml(\"Evaluation\")}</h4>`\n      html += `<div>${trustgrade.escapeHtml(evalText).replace(/\\n/g, \"<br>\")}</div>`\n      html += `</div>`\n\n      // Improved Assignment section\n      html += `<div class=\"tg-section tg-improved\" style=\"margin-bottom:8px;\">`\n      html += `<h4 style=\"margin:0 0 8px 0;\">${trustgrade.escapeHtml(\"Improved Assignment\")}</h4>`\n      html += `<div>${trustgrade.escapeHtml(improved).replace(/\\n/g, \"<br>\")}</div>`\n      html += `</div>`\n\n      return html\n    },\n\n    checkInstructions: function () {\n      var instructions = this.getInstructions()\n      if (!instructions || instructions.trim().length === 0) {\n        Str.get_string(\"no_instructions_error\", \"local_trustgrade\").then((message) => {\n          Str.get_string(\"input_validation_error\", \"local_trustgrade\").then((title) => {\n            trustgrade.showErrorModal(title, message)\n          })\n        })\n        return\n      }\n\n      $(\"#check-instructions-btn\").prop(\"disabled\", true)\n      $(\"#ai-loading\").show()\n      $(\"#ai-recommendation-container\").hide()\n\n      var cmid = this.getCourseModuleId()\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_check_instructions\",\n          args: {\n            cmid: cmid,\n            instructions: instructions,\n            intro_itemid: trustgrade.getIntroEditorItemId(),\n            intro_attachments_itemid: trustgrade.getIntroAttachmentsItemId(),\n          },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            var recommendationHtml = \"\"\n            try {\n              var recObj =\n                typeof response.recommendation === \"string\"\n                  ? JSON.parse(response.recommendation)\n                  : response.recommendation\n\n              recommendationHtml = trustgrade.renderRecommendation(recObj)\n            } catch (e) {\n              // Fallback to legacy plaintext if JSON parsing fails\n              recommendationHtml = String(response.recommendation || \"\").replace(/\\n/g, \"<br>\")\n            }\n\n            if (response.from_cache) {\n              Str.get_string(\"cache_hit\", \"local_trustgrade\").then((cacheMessage) => {\n                recommendationHtml =\n                  '<div class=\"alert alert-info mb-2\"><i class=\"fa fa-clock-o\"></i> <small>' +\n                  cacheMessage +\n                  \" (Debug mode)</small></div>\" +\n                  recommendationHtml\n                $(\"#ai-recommendation\").html(recommendationHtml)\n              })\n            } else {\n              $(\"#ai-recommendation\").html(recommendationHtml)\n            }\n            $(\"#ai-recommendation-container\").show()\n          } else {\n            Str.get_string(\"gateway_error\", \"local_trustgrade\").then((title) => {\n              trustgrade.showErrorModal(title, response.error || \"An error occurred.\")\n            })\n          }\n        })\n        .fail(Notification.exception)\n        .always(() => {\n          $(\"#check-instructions-btn\").prop(\"disabled\", false)\n          $(\"#ai-loading\").hide()\n        })\n    },\n\n    generateQuestions: function () {\n      var instructions = this.getInstructions()\n      if (!instructions || instructions.trim().length === 0) {\n        Str.get_string(\"no_instructions_questions_error\", \"local_trustgrade\").then((message) => {\n          Str.get_string(\"input_validation_error\", \"local_trustgrade\").then((title) => {\n            trustgrade.showErrorModal(title, message)\n          })\n        })\n        return\n      }\n\n      $(\"#generate-questions-btn\").prop(\"disabled\", true)\n      $(\"#ai-question-loading\").show()\n      $(\"#ai-questions-container\").hide()\n\n      var cmid = this.getCourseModuleId()\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_generate_questions\",\n          args: {\n            cmid: cmid,\n            instructions: instructions,\n            intro_itemid: trustgrade.getIntroEditorItemId(),\n            intro_attachments_itemid: trustgrade.getIntroAttachmentsItemId(),\n          },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            // response.questions is expected to be a JSON string representing the NEW pattern:\n            // [\n            //   {\n            //     id, type, text,\n            //     options: [{ id, text, is_correct, explanation }],\n            //     metadata: { blooms_level, points }\n            //   }\n            // ]\n            var questions = typeof response.questions === \"string\" ? JSON.parse(response.questions) : response.questions\n\n            trustgrade.formatQuestionsDisplay(questions).then((questionsHtml) => {\n              if (response.from_cache) {\n                Str.get_string(\"cache_hit\", \"local_trustgrade\").then((cacheMessage) => {\n                  questionsHtml =\n                    '<div class=\"alert alert-info mb-2\"><i class=\"fa fa-clock-o\"></i> <small>' +\n                    cacheMessage +\n                    \" (Debug mode)</small></div>\" +\n                    questionsHtml\n                  $(\"#ai-questions\").html(questionsHtml)\n                })\n              } else {\n                $(\"#ai-questions\").html(questionsHtml)\n              }\n              $(\"#ai-questions-container\").show()\n            })\n\n            if (response.message) {\n              trustgrade.showSuccessNotification(response.message)\n            }\n            trustgrade.loadQuestionBank()\n          } else {\n            Str.get_string(\"gateway_error\", \"local_trustgrade\").then((title) => {\n              trustgrade.showErrorModal(title, response.error || \"An error occurred.\")\n            })\n          }\n        })\n        .fail(Notification.exception)\n        .always(() => {\n          $(\"#generate-questions-btn\").prop(\"disabled\", false)\n          $(\"#ai-question-loading\").hide()\n        })\n    },\n\n    /**\n     * Format the AI-generated questions for display (NEW JSON PATTERN ONLY).\n     * - No difficulty field.\n     * - Per-option explanations.\n     * - Points are in question.metadata.points.\n     */\n    formatQuestionsDisplay: (questions) =>\n      new Promise((resolve) => {\n        Promise.all([\n          Str.get_string(\"generated_questions\", \"local_trustgrade\"),\n          Str.get_string(\"question\", \"local_trustgrade\"),\n          Str.get_string(\"points\", \"local_trustgrade\"),\n          Str.get_string(\"correct\", \"local_trustgrade\"),\n          Str.get_string(\"explanation\", \"local_trustgrade\"),\n        ]).then((strings) => {\n          const [sGeneratedQuestions, sQuestion, sPoints, sCorrect, sExplanation] = strings\n\n          let html = \"<h4>\" + sGeneratedQuestions + \":</h4>\"\n\n          if (!Array.isArray(questions) || questions.length === 0) {\n            html += `<div style=\"color:#666;\">${trustgrade.escapeHtml(\"No questions generated.\")}</div>`\n            resolve(html)\n            return\n          }\n\n          questions.forEach((q, index) => {\n            const qType = q && q.type ? String(q.type) : \"\"\n            const qText = q && q.text ? String(q.text) : \"\"\n            const points =\n              q && q.metadata && (typeof q.metadata.points === \"number\" || typeof q.metadata.points === \"string\")\n                ? String(q.metadata.points)\n                : \"\"\n            const blooms = q && q.metadata && q.metadata.blooms_level ? String(q.metadata.blooms_level) : \"\"\n\n            html += `<div class=\"question-item\" style=\"margin-bottom: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px;\">`\n\n            // Header line: \"Question X (Y points)\" if points exist\n            let header = `${sQuestion} ${index + 1}`\n            if (points !== \"\") {\n              header += ` (${trustgrade.escapeHtml(points)} ${sPoints})`\n            }\n            html += `<h5>${trustgrade.escapeHtml(header)}</h5>`\n\n            if (qType) {\n              html += `<p><strong>Type:</strong> ${trustgrade.escapeHtml(qType)}</p>`\n            }\n\n            html += `<p><strong>${trustgrade.escapeHtml(sQuestion)}:</strong> ${trustgrade.escapeHtml(qText)}</p>`\n\n            if (blooms) {\n              html += `<p><strong>${trustgrade.escapeHtml(\"Bloom's level\")}:</strong> ${trustgrade.escapeHtml(\n                blooms,\n              )}</p>`\n            }\n\n            // Options with per-option explanation\n            if (Array.isArray(q.options) && q.options.length > 0) {\n              html += `<div><strong>Options:</strong></div><ul style=\"margin:6px 0 0 20px;\">`\n              q.options.forEach((opt, optIndex) => {\n                const label = String.fromCharCode(65 + optIndex) + \".\"\n                const optText = opt && opt.text ? String(opt.text) : \"\"\n                const isCorrect = !!(opt && opt.is_correct)\n                const explanation = opt && opt.explanation ? String(opt.explanation) : \"\"\n\n                const correctBadge = isCorrect\n                  ? ` <span class=\"badge badge-success\" style=\"display:inline-block; padding:2px 6px; background:#16a34a; color:#fff; border-radius:4px; font-size:12px;\">${trustgrade.escapeHtml(\n                      sCorrect,\n                    )}</span>`\n                  : \"\"\n\n                html += `<li style=\"margin:6px 0;\">`\n                html += `<div>${trustgrade.escapeHtml(label)} ${trustgrade.escapeHtml(optText)}${correctBadge}</div>`\n                if (explanation) {\n                  html += `<div style=\"margin-left:20px; color:#555;\"><em>${trustgrade.escapeHtml(\n                    sExplanation,\n                  )}:</em> ${trustgrade.escapeHtml(explanation)}</div>`\n                }\n                html += `</li>`\n              })\n              html += `</ul>`\n            }\n\n            html += `</div>`\n          })\n\n          resolve(html)\n        })\n      }),\n\n    getInstructions: () => {\n      var instructions = \"\"\n      var instructionSelectors = [\"#id_introeditor_ifr\", \"#id_intro\", 'textarea[name=\"intro\"]']\n      for (var i = 0; i < instructionSelectors.length; i++) {\n        var $element = $(instructionSelectors[i])\n        if ($element.length > 0) {\n          if ($element.is(\"iframe\")) {\n            try {\n              var iframeDoc = $element[0].contentDocument || $element[0].contentWindow.document\n              instructions = $(\"<div>\").html(iframeDoc.body.innerHTML).text()\n            } catch (e) {\n              if (typeof tinyMCE !== \"undefined\" && tinyMCE.get(\"id_introeditor\")) {\n                instructions = tinyMCE.get(\"id_introeditor\").getContent({ format: \"text\" })\n              }\n            }\n          } else {\n            instructions = $element.val() || \"\"\n          }\n          if (instructions && instructions.trim().length > 0) break\n        }\n      }\n      return typeof instructions === \"string\" ? instructions.trim() : \"\"\n    },\n\n    getCourseModuleId: () => {\n      var urlParams = new URLSearchParams(window.location.search)\n      var cmid = urlParams.get(\"update\")\n      if (!cmid) {\n        cmid = $('input[name=\"coursemodule\"]').val() || 0\n      }\n      return Number.parseInt(cmid) || 0\n    },\n\n    getIntroEditorItemId: () => {\n      var $input = $('input[name=\"introeditor[itemid]\"]')\n      var val = $input.length ? $input.val() : \"\"\n      var n = Number.parseInt(val || \"0\", 10)\n      return isNaN(n) ? 0 : n\n    },\n\n    getIntroAttachmentsItemId: () => {\n      // Try a few common names used by Moodle forms for a filemanager attached to \"intro\"\n      var candidates = [\n        'input[name=\"introattachments\"]',\n        'input[name=\"introattachments_filemanager\"]',\n        'input[name=\"introattachments[itemid]\"]',\n      ]\n      for (var i = 0; i < candidates.length; i++) {\n        var $el = $(candidates[i])\n        if ($el.length) {\n          var v = Number.parseInt($el.val() || \"0\", 10)\n          if (!isNaN(v) && v > 0) return v\n        }\n      }\n      return 0\n    },\n\n    loadQuestionBank: function () {\n      var cmid = this.getCourseModuleId()\n      if (cmid <= 0) return\n\n      $(\"#question-bank-loading\").show()\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_get_question_bank\",\n          args: { cmid: cmid },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            var questions = JSON.parse(response.questions)\n            if (questions && questions.length > 0) {\n              Str.get_string(\"question_bank_title\", \"local_trustgrade\").then((title) => {\n                var questionBankHtml = \"<h4>\" + title + \"</h4>\" + response.html\n                $(\"#question-bank-container\").html(questionBankHtml)\n                if (typeof require !== \"undefined\") {\n                  require([\"local_trustgrade/question_editor\"], (QuestionEditor) => {\n                    QuestionEditor.reinitialize(cmid)\n                  })\n                }\n              })\n            } else {\n              $(\"#question-bank-container\").html(\"\")\n            }\n          } else {\n            Notification.addNotification({ message: response.error || \"Failed to load question bank\", type: \"warning\" })\n          }\n        })\n        .fail(Notification.exception)\n        .always(() => {\n          $(\"#question-bank-loading\").hide()\n        })\n    },\n  }\n\n  return trustgrade\n})\n"],"names":["define","window","tinyMCE","M","$","Ajax","Notification","Str","ModalFactory","trustgrade","init","this","bindEvents","loadQuestionBank","document","on","e","preventDefault","checkInstructions","generateQuestions","updateSingleQuizSetting","target","val","showErrorModal","title","message","create","type","types","ALERT","body","then","modal","show","showSuccessNotification","addNotification","settingName","settingValue","cmid","getCourseModuleId","call","methodname","args","setting_name","setting_value","done","response","success","get_string","setting","replace","error","fail","exception","escapeHtml","value","String","s","renderRecommendation","recommendation","txt","JSON","stringify","table","rows","Array","isArray","tableTitle","evalText","EvaluationText","content","improved","ImprovedAssignment","html","length","forEach","r","c","m","instructions","getInstructions","trim","prop","hide","intro_itemid","getIntroEditorItemId","intro_attachments_itemid","getIntroAttachmentsItemId","recommendationHtml","recObj","parse","from_cache","cacheMessage","always","questions","formatQuestionsDisplay","questionsHtml","Promise","resolve","all","strings","sGeneratedQuestions","sQuestion","sPoints","sCorrect","sExplanation","q","index","qType","qText","text","points","metadata","blooms","blooms_level","header","options","opt","optIndex","label","fromCharCode","optText","isCorrect","is_correct","explanation","correctBadge","instructionSelectors","i","$element","is","iframeDoc","contentDocument","contentWindow","innerHTML","get","getContent","format","URLSearchParams","location","search","Number","parseInt","$input","n","isNaN","candidates","$el","v","questionBankHtml","require","QuestionEditor","reinitialize"],"mappings":"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"}