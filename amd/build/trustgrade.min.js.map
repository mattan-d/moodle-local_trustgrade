{"version":3,"file":"trustgrade.min.js","sources":["../src/trustgrade.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n\nvar define = window.define // Declare define variable\nvar M = window.M // Declare M variable\nvar tinyMCE = window.tinyMCE // Declare tinyMCE variable\n\ndefine([\"jquery\", \"core/ajax\", \"core/notification\", \"core/str\", \"core/modal_factory\", \"core/templates\"], (\n  $,\n  Ajax,\n  Notification,\n  Str,\n  ModalFactory,\n  Templates,\n) => {\n  var trustgrade = {\n    init: function () {\n      this.bindEvents()\n      this.loadQuestionBank() // Load existing questions on page load\n    },\n\n    bindEvents: () => {\n      $(document).on(\"click\", \"#check-instructions-btn\", (e) => {\n        e.preventDefault()\n        trustgrade.checkInstructions()\n      })\n      $(document).on(\"change\", \"#id_trustgrade_questions_to_generate\", (e) => {\n        e.preventDefault()\n        trustgrade.updateSingleQuizSetting(\"questions_to_generate\", $(e.target).val())\n      })\n    },\n\n    showErrorModal: (title, message) => {\n      ModalFactory.create({\n        type: ModalFactory.types.ALERT,\n        title: title,\n        body: message,\n      }).then((modal) => modal.show())\n    },\n\n    showSuccessNotification: (message) => {\n      Notification.addNotification({ message: message, type: \"success\" })\n    },\n\n    updateSingleQuizSetting: function (settingName, settingValue) {\n      var cmid = this.getCourseModuleId()\n      if (cmid <= 0) return\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_update_quiz_setting\",\n          args: {\n            cmid: cmid,\n            setting_name: settingName,\n            setting_value: settingValue,\n          },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            Str.get_string(\"setting_updated_success\", \"local_trustgrade\", {\n              setting: settingName.replace(/_/g, \" \"),\n            }).then((message) => {\n              trustgrade.showSuccessNotification(message)\n            })\n          } else {\n            Str.get_string(\"setting_update_error\", \"local_trustgrade\").then((title) => {\n              trustgrade.showErrorModal(title, response.error || \"An error occurred while updating the setting.\")\n            })\n          }\n        })\n        .fail(Notification.exception)\n    },\n\n    /**\n     * Basic HTML escape to avoid XSS in rendered content.\n     */\n    escapeHtml: (value) => {\n      if (value === null || value === undefined) return \"\"\n      return String(value).replace(/[&<>\"']/g, (s) => {\n        const map = { \"&\": \"&amp;\", \"<\": \"&lt;\", \">\": \"&gt;\", '\"': \"&quot;\", \"'\": \"&#39;\" }\n        return map[s] || s\n      })\n    },\n\n    /**\n     * Render the recommendation using Mustache templates and localized strings.\n     * Supports both legacy string format and structured JSON objects.\n     */\n    renderRecommendation: (recommendation) => {\n      return new Promise((resolve) => {\n        Promise.all([\n          Str.get_string(\"criteria_evaluation\", \"local_trustgrade\"),\n          Str.get_string(\"criterion\", \"local_trustgrade\"),\n          Str.get_string(\"met\", \"local_trustgrade\"),\n          Str.get_string(\"suggestions\", \"local_trustgrade\"),\n          Str.get_string(\"evaluation\", \"local_trustgrade\"),\n          Str.get_string(\"improved_assignment\", \"local_trustgrade\"),\n          Str.get_string(\"no_criteria_provided\", \"local_trustgrade\"),\n          Str.get_string(\"recommendation_error\", \"local_trustgrade\"),\n        ]).then((strings) => {\n          const [\n            criteriaEvaluation,\n            criterion,\n            met,\n            suggestions,\n            evaluation,\n            improvedAssignment,\n            noCriteriaProvided,\n            recommendationError,\n          ] = strings\n\n          const localizedStrings = {\n            criteria_evaluation: criteriaEvaluation,\n            criterion: criterion,\n            met: met,\n            suggestions: suggestions,\n            evaluation: evaluation,\n            improved_assignment: improvedAssignment,\n            no_criteria_provided: noCriteriaProvided,\n            recommendation_error: recommendationError,\n          }\n\n          try {\n            // Legacy string fallback\n            if (typeof recommendation === \"string\") {\n              const content = recommendation.replace(/\\n/g, \"<br>\")\n              resolve(content)\n              return\n            }\n\n            // If it's not an object, stringify and fallback to legacy behavior\n            if (!recommendation || typeof recommendation !== \"object\") {\n              try {\n                const txt = JSON.stringify(recommendation, null, 2)\n                resolve(trustgrade.escapeHtml(txt).replace(/\\n/g, \"<br>\"))\n                return\n              } catch (e) {\n                resolve(\"\")\n                return\n              }\n            }\n\n            const table = recommendation.table || {}\n            const rows = Array.isArray(table.rows) ? table.rows : []\n            const tableTitle = table.title || criteriaEvaluation\n\n            const processedRows = rows.map((row) => {\n              const metValue = (row[\"Met\"] || row[\"Met (y/n)\"] || \"\").toLowerCase()\n              return {\n                Criterion: trustgrade.escapeHtml(row[\"Criterion\"] || \"\"),\n                Met: trustgrade.escapeHtml(row[\"Met\"] || row[\"Met (y/n)\"] || \"\"),\n                Suggestions: row[\"Suggestions\"] || \"\",\n                isMetYes: metValue === \"yes\" || metValue === \"y\" || metValue === \"true\",\n                isMetNo: metValue === \"no\" || metValue === \"n\" || metValue === \"false\",\n                isMetPartial: metValue === \"partial\" || metValue === \"partially\" || metValue === \"maybe\",\n              }\n            })\n\n            let html = \"\"\n\n            // Render table section\n            const tableContext = {\n              title: tableTitle,\n              rows: processedRows,\n              strings: localizedStrings,\n            }\n\n            Templates.render(\"local_trustgrade/recommendation_table\", tableContext)\n              .then((tableHtml) => {\n                html += tableHtml\n\n                // Render evaluation section\n                const evalText =\n                  recommendation.EvaluationText && recommendation.EvaluationText.content\n                    ? String(recommendation.EvaluationText.content).replace(/\\n/g, \"<br>\")\n                    : \"\"\n\n                if (evalText) {\n                  const evalContext = {\n                    title: evaluation,\n                    content: evalText,\n                    icon: \"fa fa-clipboard-check\",\n                    sectionClass: \"tg-eval-text\",\n                  }\n\n                  return Templates.render(\"local_trustgrade/recommendation_section\", evalContext)\n                }\n                return \"\"\n              })\n              .then((evalHtml) => {\n                html += evalHtml\n\n                // Render improved assignment section\n                const improved =\n                  recommendation.ImprovedAssignment && recommendation.ImprovedAssignment.content\n                    ? String(recommendation.ImprovedAssignment.content).replace(/\\n/g, \"<br>\")\n                    : \"\"\n\n                if (improved) {\n                  const improvedContext = {\n                    title: improvedAssignment,\n                    content: improved,\n                    icon: \"fa fa-lightbulb\",\n                    sectionClass: \"tg-improved\",\n                  }\n\n                  return Templates.render(\"local_trustgrade/recommendation_section\", improvedContext)\n                }\n                return \"\"\n              })\n              .then((improvedHtml) => {\n                html += improvedHtml\n                resolve(html)\n              })\n              .catch((error) => {\n                console.error(\"Template rendering error:\", error)\n                resolve(trustgrade.renderRecommendationLegacy(recommendation, localizedStrings))\n              })\n          } catch (error) {\n            console.error(\"Recommendation rendering error:\", error)\n            resolve(`<div class=\"alert alert-danger\">${recommendationError}</div>`)\n          }\n        })\n      })\n    },\n\n    /**\n     * Legacy fallback rendering method with localized strings\n     */\n    renderRecommendationLegacy: (recommendation, strings) => {\n      const table = recommendation.table || {}\n      const rows = Array.isArray(table.rows) ? table.rows : []\n      const tableTitle = table.title || strings.criteria_evaluation\n\n      const evalText =\n        recommendation.EvaluationText && recommendation.EvaluationText.content\n          ? String(recommendation.EvaluationText.content)\n          : \"\"\n      const improved =\n        recommendation.ImprovedAssignment && recommendation.ImprovedAssignment.content\n          ? String(recommendation.ImprovedAssignment.content)\n          : \"\"\n\n      let html = \"\"\n\n      // Table section with modern styling\n      html += `<div class=\"tg-section tg-table-section mb-4\">`\n      if (tableTitle) {\n        html += `<h4 class=\"mb-3 text-primary fw-semibold\">${trustgrade.escapeHtml(tableTitle)}</h4>`\n      }\n      html += `\n        <div class=\"table-responsive shadow-sm rounded\">\n          <table class=\"table table-hover table-striped mb-0 modern-criteria-table\">\n            <thead class=\"table-dark\">\n              <tr>\n                <th scope=\"col\" class=\"fw-semibold\">${trustgrade.escapeHtml(strings.criterion)}</th>\n                <th scope=\"col\" class=\"fw-semibold text-center\" style=\"width: 100px;\">${trustgrade.escapeHtml(strings.met)}</th>\n                <th scope=\"col\" class=\"fw-semibold\">${trustgrade.escapeHtml(strings.suggestions)}</th>\n              </tr>\n            </thead>\n            <tbody>\n      `\n      if (rows.length > 0) {\n        rows.forEach((r) => {\n          const c = trustgrade.escapeHtml(r[\"Criterion\"] ?? \"\")\n          const m = trustgrade.escapeHtml(r[\"Met\"] ?? r[\"Met (y/n)\"] ?? \"\")\n          const s = r[\"Suggestions\"] ?? \"\"\n          const metValue = m.toLowerCase()\n\n          let metBadge = `<span class=\"badge bg-secondary rounded-pill\">${m}</span>`\n          if (metValue === \"yes\" || metValue === \"y\" || metValue === \"true\") {\n            metBadge = `<span class=\"badge bg-success rounded-pill\"><i class=\"fa fa-check me-1\"></i>${m}</span>`\n          } else if (metValue === \"no\" || metValue === \"n\" || metValue === \"false\") {\n            metBadge = `<span class=\"badge bg-danger rounded-pill\"><i class=\"fa fa-times me-1\"></i>${m}</span>`\n          } else if (metValue === \"partial\" || metValue === \"partially\" || metValue === \"maybe\") {\n            metBadge = `<span class=\"badge bg-warning rounded-pill\"><i class=\"fa fa-minus me-1\"></i>${m}</span>`\n          }\n\n          html += `\n              <tr class=\"criteria-row\">\n                <td class=\"criterion-cell\"><div class=\"fw-medium text-dark\">${c}</div></td>\n                <td class=\"met-cell text-center\">${metBadge}</td>\n                <td class=\"suggestions-cell\"><div class=\"text-muted small\">${s}</div></td>\n              </tr>\n          `\n        })\n      } else {\n        html += `\n              <tr>\n                <td colspan=\"3\" class=\"text-center text-muted py-4\">\n                  <i class=\"fa fa-info-circle me-2\"></i>${trustgrade.escapeHtml(strings.no_criteria_provided)}\n                </td>\n              </tr>\n        `\n      }\n      html += `\n            </tbody>\n          </table>\n        </div>\n      </div>\n      `\n\n      // Evaluation Text section\n      if (evalText) {\n        html += `<div class=\"tg-section tg-eval-text mb-4\">\n          <div class=\"card border-0 shadow-sm\">\n            <div class=\"card-header bg-light border-0 py-3\">\n              <h4 class=\"card-title mb-0 d-flex align-items-center\">\n                <i class=\"fa fa-clipboard-check me-2 text-primary\"></i>\n                ${trustgrade.escapeHtml(strings.evaluation)}\n              </h4>\n            </div>\n            <div class=\"card-body\">\n              <div class=\"recommendation-content\">${evalText.replace(/\\n/g, \"<br>\")}</div>\n            </div>\n          </div>\n        </div>`\n      }\n\n      // Improved Assignment section\n      if (improved) {\n        html += `<div class=\"tg-section tg-improved mb-4\">\n          <div class=\"card border-0 shadow-sm\">\n            <div class=\"card-header bg-light border-0 py-3\">\n              <h4 class=\"card-title mb-0 d-flex align-items-center\">\n                <i class=\"fa fa-lightbulb me-2 text-primary\"></i>\n                ${trustgrade.escapeHtml(strings.improved_assignment)}\n              </h4>\n            </div>\n            <div class=\"card-body\">\n              <div class=\"recommendation-content\">${improved.replace(/\\n/g, \"<br>\")}</div>\n            </div>\n          </div>\n        </div>`\n      }\n\n      return html\n    },\n\n    checkInstructions: function () {\n      var instructions = this.getInstructions()\n      // Allow empty instructions to proceed\n\n      $(\"#check-instructions-btn\").prop(\"disabled\", true)\n      $(\"#ai-loading\").show()\n      $(\"#ai-recommendation-container\").hide()\n\n      var cmid = this.getCourseModuleId()\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_check_instructions\",\n          args: {\n            cmid: cmid,\n            instructions: instructions || \"\", // Ensure we pass empty string instead of null/undefined\n            intro_itemid: trustgrade.getIntroEditorItemId(),\n            intro_attachments_itemid: trustgrade.getIntroAttachmentsItemId(),\n          },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            try {\n              var recObj =\n                typeof response.recommendation === \"string\"\n                  ? JSON.parse(response.recommendation)\n                  : response.recommendation\n\n              trustgrade.renderRecommendation(recObj).then((recommendationHtml) => {\n                if (response.from_cache) {\n                  Str.get_string(\"cache_hit\", \"local_trustgrade\").then((cacheMessage) => {\n                    recommendationHtml =\n                      '<div class=\"alert alert-info mb-2\"><i class=\"fa fa-clock-o\"></i> <small>' +\n                      cacheMessage +\n                      \" (Debug mode)</small></div>\" +\n                      recommendationHtml\n                    $(\"#ai-recommendation\").html(recommendationHtml)\n                  })\n                } else {\n                  $(\"#ai-recommendation\").html(recommendationHtml)\n                }\n                $(\"#ai-recommendation-container\").show()\n              })\n            } catch (e) {\n              // Fallback to legacy plaintext if JSON parsing fails\n              const recommendationHtml = String(response.recommendation || \"\").replace(/\\n/g, \"<br>\")\n              $(\"#ai-recommendation\").html(recommendationHtml)\n              $(\"#ai-recommendation-container\").show()\n            }\n          } else {\n            Str.get_string(\"gateway_error\", \"local_trustgrade\").then((title) => {\n              trustgrade.showErrorModal(title, response.error || \"An error occurred.\")\n            })\n          }\n        })\n        .fail(Notification.exception)\n        .always(() => {\n          $(\"#check-instructions-btn\").prop(\"disabled\", false)\n          $(\"#ai-loading\").hide()\n        })\n    },\n\n    generateQuestions: function () {\n      var instructions = this.getInstructions()\n      // Allow empty instructions to proceed\n\n      $(\"#generate-questions-btn\").prop(\"disabled\", true)\n      $(\"#ai-question-loading\").show()\n\n      var cmid = this.getCourseModuleId()\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_generate_questions\",\n          args: {\n            cmid: cmid,\n            instructions: instructions || \"\", // Ensure we pass empty string instead of null/undefined\n            intro_itemid: trustgrade.getIntroEditorItemId(),\n            intro_attachments_itemid: trustgrade.getIntroAttachmentsItemId(),\n          },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            if (response.message) {\n              trustgrade.showSuccessNotification(response.message)\n            }\n            trustgrade.loadQuestionBank()\n          } else {\n            Str.get_string(\"gateway_error\", \"local_trustgrade\").then((title) => {\n              trustgrade.showErrorModal(title, response.error || \"An error occurred.\")\n            })\n          }\n        })\n        .fail(Notification.exception)\n        .always(() => {\n          $(\"#generate-questions-btn\").prop(\"disabled\", false)\n          $(\"#ai-question-loading\").hide()\n        })\n    },\n\n    /**\n     * Format the AI-generated questions for display (NEW JSON PATTERN ONLY).\n     * - No difficulty field.\n     * - Per-option explanations.\n     * - Points are in question.metadata.points.\n     */\n    formatQuestionsDisplay: (questions) =>\n      new Promise((resolve) => {\n        Promise.all([\n          Str.get_string(\"generated_questions\", \"local_trustgrade\"),\n          Str.get_string(\"question\", \"local_trustgrade\"),\n          Str.get_string(\"points\", \"local_trustgrade\"),\n          Str.get_string(\"correct\", \"local_trustgrade\"),\n          Str.get_string(\"explanation\", \"local_trustgrade\"),\n        ]).then((strings) => {\n          const [sGeneratedQuestions, sQuestion, sPoints, sCorrect, sExplanation] = strings\n\n          let html = \"<h4>\" + sGeneratedQuestions + \":</h4>\"\n\n          if (!Array.isArray(questions) || questions.length === 0) {\n            html += `<div style=\"color:#666;\">${trustgrade.escapeHtml(\"No questions generated.\")}</div>`\n            resolve(html)\n            return\n          }\n\n          questions.forEach((q, index) => {\n            const qType = q && q.type ? String(q.type) : \"\"\n            const qText = q && q.text ? String(q.text) : \"\"\n            const points =\n              q && q.metadata && (typeof q.metadata.points === \"number\" || typeof q.metadata.points === \"string\")\n                ? String(q.metadata.points)\n                : \"\"\n            const blooms = q && q.metadata && q.metadata.blooms_level ? String(q.metadata.blooms_level) : \"\"\n\n            html += `<div class=\"question-item\" style=\"margin-bottom: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px;\">`\n\n            // Header line: \"Question X (Y points)\" if points exist\n            let header = `${sQuestion} ${index + 1}`\n            if (points !== \"\") {\n              header += ` (${trustgrade.escapeHtml(points)} ${sPoints})`\n            }\n            html += `<h5>${trustgrade.escapeHtml(header)}</h5>`\n\n            if (qType) {\n              html += `<p><strong>Type:</strong> ${trustgrade.escapeHtml(qType)}</p>`\n            }\n\n            html += `<p><strong>${trustgrade.escapeHtml(sQuestion)}:</strong> ${trustgrade.escapeHtml(qText)}</p>`\n\n            if (blooms) {\n              html += `<p><strong>${trustgrade.escapeHtml(\"Bloom's level\")}:</strong> ${trustgrade.escapeHtml(\n                blooms,\n              )}</p>`\n            }\n\n            // Options with per-option explanation\n            if (Array.isArray(q.options) && q.options.length > 0) {\n              html += `<div><strong>Options:</strong></div><ul style=\"margin:6px 0 0 20px;\">`\n              q.options.forEach((opt, optIndex) => {\n                const label = String.fromCharCode(65 + optIndex) + \".\"\n                const optText = opt && opt.text ? String(opt.text) : \"\"\n                const isCorrect = !!(opt && opt.is_correct)\n                const explanation = opt && opt.explanation ? String(opt.explanation) : \"\"\n\n                const correctBadge = isCorrect\n                  ? ` <span class=\"badge badge-success\" style=\"display:inline-block; padding:2px 6px; background:#16a34a; color:#fff; border-radius:4px; font-size:12px;\">${trustgrade.escapeHtml(\n                      sCorrect,\n                    )}</span>`\n                  : \"\"\n\n                html += `<li style=\"margin:6px 0;\">`\n                html += `<div>${trustgrade.escapeHtml(label)} ${trustgrade.escapeHtml(optText)}${correctBadge}</div>`\n                if (explanation) {\n                  html += `<div style=\"margin-left:20px; color:#555;\"><em>${trustgrade.escapeHtml(\n                    sExplanation,\n                  )}:</em> ${trustgrade.escapeHtml(explanation)}</div>`\n                }\n                html += `</li>`\n              })\n              html += `</ul>`\n            }\n\n            html += `</div>`\n          })\n\n          resolve(html)\n        })\n      }),\n\n    getInstructions: () => {\n      var instructions = \"\"\n      var instructionSelectors = [\"#id_introeditor_ifr\", \"#id_intro\", 'textarea[name=\"intro\"]']\n      for (var i = 0; i < instructionSelectors.length; i++) {\n        var $element = $(instructionSelectors[i])\n        if ($element.length > 0) {\n          if ($element.is(\"iframe\")) {\n            try {\n              var iframeDoc = $element[0].contentDocument || $element[0].contentWindow.document\n              instructions = $(\"<div>\").html(iframeDoc.body.innerHTML).text()\n            } catch (e) {\n              if (typeof tinyMCE !== \"undefined\" && tinyMCE.get(\"id_introeditor\")) {\n                instructions = tinyMCE.get(\"id_introeditor\").getContent({ format: \"text\" })\n              }\n            }\n          } else {\n            instructions = $element.val() || \"\"\n          }\n          if (instructions && instructions.trim().length > 0) break\n        }\n      }\n      return typeof instructions === \"string\" ? instructions.trim() : \"\"\n    },\n\n    getCourseModuleId: () => {\n      var urlParams = new URLSearchParams(window.location.search)\n      var cmid = urlParams.get(\"update\")\n      if (!cmid) {\n        cmid = $('input[name=\"coursemodule\"]').val() || 0\n      }\n      return Number.parseInt(cmid) || 0\n    },\n\n    getIntroEditorItemId: () => {\n      var $input = $('input[name=\"introeditor[itemid]\"]')\n      var val = $input.length ? $input.val() : \"\"\n      var n = Number.parseInt(val || \"0\", 10)\n      return isNaN(n) ? 0 : n\n    },\n\n    getIntroAttachmentsItemId: () => {\n      // Try a few common names used by Moodle forms for a filemanager attached to \"intro\"\n      var candidates = [\n        'input[name=\"introattachments\"]',\n        'input[name=\"introattachments_filemanager\"]',\n        'input[name=\"introattachments[itemid]\"]',\n      ]\n      for (var i = 0; i < candidates.length; i++) {\n        var $el = $(candidates[i])\n        if ($el.length) {\n          var v = Number.parseInt($el.val() || \"0\", 10)\n          if (!isNaN(v) && v > 0) return v\n        }\n      }\n      return 0\n    },\n\n    loadQuestionBank: function () {\n      var cmid = this.getCourseModuleId()\n      if (cmid <= 0) return\n\n      $(\"#question-bank-loading\").show()\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_get_question_bank\",\n          args: { cmid: cmid },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            var questions = JSON.parse(response.questions)\n            if (questions && questions.length > 0) {\n              Str.get_string(\"question_bank_title\", \"local_trustgrade\").then((title) => {\n                var questionBankHtml = \"<h4>\" + title + \"</h4>\" + response.html\n                $(\"#question-bank-container\").html(questionBankHtml)\n                if (typeof require !== \"undefined\") {\n                  require([\"local_trustgrade/question_editor\"], (QuestionEditor) => {\n                    QuestionEditor.reinitialize(cmid)\n                  })\n                }\n              })\n            } else {\n              $(\"#question-bank-container\").html(\"\")\n            }\n          } else {\n            Notification.addNotification({ message: response.error || \"Failed to load question bank\", type: \"warning\" })\n          }\n        })\n        .fail(Notification.exception)\n        .always(() => {\n          $(\"#question-bank-loading\").hide()\n        })\n    },\n  }\n\n  return trustgrade\n})\n"],"names":["define","window","tinyMCE","M","$","Ajax","Notification","Str","ModalFactory","Templates","trustgrade","init","this","bindEvents","loadQuestionBank","document","on","e","preventDefault","checkInstructions","updateSingleQuizSetting","target","val","showErrorModal","title","message","create","type","types","ALERT","body","then","modal","show","showSuccessNotification","addNotification","settingName","settingValue","cmid","getCourseModuleId","call","methodname","args","setting_name","setting_value","done","response","success","get_string","setting","replace","error","fail","exception","escapeHtml","value","String","s","renderRecommendation","recommendation","Promise","resolve","all","strings","criteriaEvaluation","criterion","met","suggestions","evaluation","improvedAssignment","noCriteriaProvided","recommendationError","localizedStrings","criteria_evaluation","improved_assignment","no_criteria_provided","recommendation_error","content","txt","JSON","stringify","table","rows","Array","isArray","tableTitle","processedRows","map","row","metValue","toLowerCase","Criterion","Met","Suggestions","isMetYes","isMetNo","isMetPartial","html","tableContext","render","tableHtml","evalText","EvaluationText","evalContext","icon","sectionClass","evalHtml","improved","ImprovedAssignment","improvedContext","improvedHtml","catch","console","renderRecommendationLegacy","length","forEach","r","c","m","metBadge","instructions","getInstructions","prop","hide","intro_itemid","getIntroEditorItemId","intro_attachments_itemid","getIntroAttachmentsItemId","recObj","parse","recommendationHtml","from_cache","cacheMessage","always","generateQuestions","formatQuestionsDisplay","questions","sGeneratedQuestions","sQuestion","sPoints","sCorrect","sExplanation","q","index","qType","qText","text","points","metadata","blooms","blooms_level","header","options","opt","optIndex","label","fromCharCode","optText","isCorrect","is_correct","explanation","correctBadge","instructionSelectors","i","$element","is","iframeDoc","contentDocument","contentWindow","innerHTML","get","getContent","format","trim","URLSearchParams","location","search","Number","parseInt","$input","n","isNaN","candidates","$el","v","questionBankHtml","require","QuestionEditor","reinitialize"],"mappings":"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"}
