{"version":3,"file":"grading.min.js","sources":["../src/grading.js"],"sourcesContent":["define([\n  \"jquery\",\n  \"core/ajax\",\n  \"core/notification\",\n  \"core/config\",\n  \"core/str\",\n  \"core/modal_factory\",\n  \"core/modal_events\",\n], ($, Ajax, Notification, M, Str, ModalFactory, ModalEvents) => {\n  var pendingGrades = new Map()\n  var saveTimeout\n  var cmid\n\n  /**\n   * Initialize the grading functionality\n   * @param {int} courseModuleId Course module ID\n   */\n  function init(courseModuleId) {\n    cmid = courseModuleId || 0\n\n    // Bind event handlers\n    bindGradeInputEvents()\n    bindBulkActionEvents()\n\n    // Load current grades\n    loadCurrentGrades()\n  }\n\n  /**\n   * Bind events to grade input fields\n   */\n  function bindGradeInputEvents() {\n    $(document).on(\"input\", \".grade-input\", function () {\n      var $input = $(this)\n      var userid = $input.data(\"userid\")\n      var grade = $input.val()\n\n      // Mark as pending\n      pendingGrades.set(userid, grade)\n      updateGradeStatus($input, \"pending\")\n      updatePendingGradesDisplay()\n\n      // Clear existing timeout\n      if (saveTimeout) {\n        clearTimeout(saveTimeout)\n      }\n\n      // Set new timeout for auto-save\n      saveTimeout = setTimeout(() => {\n        saveGrade(userid, grade, $input)\n      }, 2000)\n    })\n\n    $(document).on(\"blur\", \".grade-input\", function () {\n      var $input = $(this)\n      var userid = $input.data(\"userid\")\n      var grade = $input.val()\n\n      // Save immediately on blur\n      if (pendingGrades.has(userid)) {\n        if (saveTimeout) {\n          clearTimeout(saveTimeout)\n        }\n        saveGrade(userid, grade, $input)\n      }\n    })\n\n    $(document).on(\"keypress\", \".grade-input\", function (e) {\n      if (e.which === 13) {\n        // Enter key\n        var $input = $(this)\n        var userid = $input.data(\"userid\")\n        var grade = $input.val()\n\n        if (saveTimeout) {\n          clearTimeout(saveTimeout)\n        }\n        saveGrade(userid, grade, $input)\n      }\n    })\n  }\n\n  /**\n   * Bind bulk action events\n   */\n  function bindBulkActionEvents() {\n    $(\"#bulk-save-grades\").on(\"click\", () => {\n      savePendingGrades()\n    })\n\n    $(\"#clear-all-grades\").on(\"click\", () => {\n      showClearAllGradesModal()\n    })\n\n    $(\"#auto-grade-by-quiz\").on(\"click\", () => {\n      showAutoGradeModal()\n    })\n  }\n\n  /**\n   * Show confirmation modal for clearing all grades\n   */\n  function showClearAllGradesModal() {\n    ModalFactory.create({\n      type: ModalFactory.types.SAVE_CANCEL,\n      title: Str.get_string(\"confirm_clear_all_grades\", \"local_trustgrade\"),\n      body: Str.get_string(\"confirm_clear_all_grades_body\", \"local_trustgrade\"),\n    })\n      .then((modal) => {\n        modal.setSaveButtonText(Str.get_string(\"clear_all_grades\", \"local_trustgrade\"))\n        modal.getRoot().on(ModalEvents.save, () => {\n          clearAllGrades()\n        })\n        modal.show()\n        return modal\n      })\n      .catch(() => {\n        // Fallback to native confirm if modal fails\n        if (confirm(\"Are you sure you want to clear all grades? This action cannot be undone.\")) {\n          clearAllGrades()\n        }\n      })\n  }\n\n  /**\n   * Show confirmation modal for auto-grading\n   */\n  function showAutoGradeModal() {\n    ModalFactory.create({\n      type: ModalFactory.types.SAVE_CANCEL,\n      title: Str.get_string(\"auto_grade_by_quiz\", \"local_trustgrade\"),\n      body: Str.get_string(\"auto_grade_confirmation\", \"local_trustgrade\"),\n    })\n      .then((modal) => {\n        modal.setSaveButtonText(Str.get_string(\"auto_grade_by_quiz\", \"local_trustgrade\"))\n        modal.getRoot().on(ModalEvents.save, () => {\n          autoGradeByQuizScore()\n        })\n        modal.show()\n        return modal\n      })\n      .catch(() => {\n        // Fallback to native confirm if modal fails\n        if (\n          confirm(\n            \"This will automatically set grades based on quiz scores for all students. Existing grades will be overwritten. Continue?\",\n          )\n        ) {\n          autoGradeByQuizScore()\n        }\n      })\n  }\n\n  /**\n   * Save a single grade\n   * @param {int} userid User ID\n   * @param {string} grade Grade value\n   * @param {jQuery} $input Input element\n   */\n  function saveGrade(userid, grade, $input) {\n    updateGradeStatus($input, \"saving\")\n\n    var promise = Ajax.call([\n      {\n        methodname: \"local_trustgrade_save_grade\",\n        args: {\n          cmid: cmid,\n          userid: userid,\n          grade: grade,\n        },\n      },\n    ])[0]\n\n    promise\n      .done((response) => {\n        if (response.success) {\n          updateGradeStatus($input, \"saved\")\n          pendingGrades.delete(userid)\n          updatePendingGradesDisplay()\n\n          // Update display with formatted grade\n          if (response.formatted_grade) {\n            $input.val(response.formatted_grade)\n          }\n        } else {\n          updateGradeStatus($input, \"error\")\n          Notification.addNotification({\n            message: \"Error saving grade for user \" + userid + \": \" + (response.message || \"Unknown error\"),\n            type: \"error\",\n          })\n        }\n      })\n      .fail((ex) => {\n        updateGradeStatus($input, \"error\")\n        Notification.exception(ex)\n      })\n  }\n\n  /**\n   * Save all pending grades\n   */\n  function savePendingGrades() {\n    if (pendingGrades.size === 0) {\n      Notification.addNotification({\n        message: \"No pending grades to save.\",\n        type: \"info\",\n      })\n      return\n    }\n\n    var $button = $(\"#bulk-save-grades\")\n    $button.prop(\"disabled\", true).html('<i class=\"fa fa-spinner fa-spin\"></i> Saving...')\n\n    // Convert Map to object for JSON encoding\n    var gradesObject = {}\n    pendingGrades.forEach((grade, userid) => {\n      gradesObject[userid] = grade\n    })\n\n    var promise = Ajax.call([\n      {\n        methodname: \"local_trustgrade_save_bulk_grades\",\n        args: {\n          cmid: cmid,\n          grades: JSON.stringify(gradesObject),\n        },\n      },\n    ])[0]\n\n    promise\n      .done((response) => {\n        if (response.success) {\n          // Clear pending grades and update status\n          pendingGrades.forEach((grade, userid) => {\n            var $input = $(\"#grade_\" + userid)\n            updateGradeStatus($input, \"saved\")\n\n            setTimeout(() => {\n              updateGradeStatus($input, \"\")\n            }, 3000)\n          })\n\n          pendingGrades.clear()\n          updatePendingGradesDisplay()\n\n          Notification.addNotification({\n            message: response.saved_count + \" grades saved successfully\",\n            type: \"success\",\n          })\n        } else {\n          Notification.addNotification({\n            message: response.message || \"Error saving grades\",\n            type: \"error\",\n          })\n        }\n      })\n      .fail(Notification.exception)\n      .always(() => {\n        $button.prop(\"disabled\", false).html('<i class=\"fa fa-save\"></i> Save All Pending')\n      })\n  }\n\n  /**\n   * Clear all grades\n   */\n  function clearAllGrades() {\n    var $button = $(\"#clear-all-grades\")\n    $button.prop(\"disabled\", true).html('<i class=\"fa fa-spinner fa-spin\"></i> Clearing...')\n\n    var promise = Ajax.call([\n      {\n        methodname: \"local_trustgrade_clear_all_grades\",\n        args: {\n          cmid: cmid,\n        },\n      },\n    ])[0]\n\n    promise\n      .done((response) => {\n        if (response.success) {\n          // Clear all input fields\n          $(\".grade-input\")\n            .val(\"\")\n            .each(function () {\n              updateGradeStatus($(this), \"\")\n            })\n\n          // Clear pending grades\n          pendingGrades.clear()\n          updatePendingGradesDisplay()\n\n          Notification.addNotification({\n            message: \"All grades cleared successfully\",\n            type: \"success\",\n          })\n        } else {\n          Notification.addNotification({\n            message: response.message || \"Error clearing grades\",\n            type: \"error\",\n          })\n        }\n      })\n      .fail(Notification.exception)\n      .always(() => {\n        $button.prop(\"disabled\", false).html('<i class=\"fa fa-eraser\"></i> Clear All Grades')\n      })\n  }\n\n  /**\n   * Auto-grade all students based on their quiz scores\n   */\n  function autoGradeByQuizScore() {\n    var $button = $(\"#auto-grade-by-quiz\")\n\n    Str.get_string(\"auto_grading_progress\", \"local_trustgrade\")\n      .then((loadingText) => {\n        $button.prop(\"disabled\", true).html('<i class=\"fa fa-spinner fa-spin\"></i> ' + loadingText)\n      })\n      .catch(() => {\n        // Fallback if string loading fails\n        $button.prop(\"disabled\", true).html('<i class=\"fa fa-spinner fa-spin\"></i> Auto-grading...')\n      })\n\n    var promise = Ajax.call([\n      {\n        methodname: \"local_trustgrade_auto_grade_by_quiz\",\n        args: {\n          cmid: cmid,\n        },\n      },\n    ])[0]\n\n    promise\n      .done((response) => {\n        if (response.success) {\n          // Parse the JSON grades string\n          var gradesObj = {}\n          try {\n            if (response.grades) {\n              gradesObj = JSON.parse(response.grades)\n            }\n          } catch (e) {\n            Str.get_string(\"error_parsing_grades\", \"local_trustgrade\")\n              .then((errorText) => {\n                console.error(errorText + \":\", e)\n              })\n              .catch(() => {\n                console.error(\"Error parsing grades JSON:\", e)\n              })\n            gradesObj = {}\n          }\n\n          // Update all grade inputs with the new grades\n          for (var userid in gradesObj) {\n            if (gradesObj.hasOwnProperty(userid)) {\n              var $input = $(\"#grade_\" + userid)\n              var grade = gradesObj[userid]\n              if (grade !== null && grade !== undefined) {\n                $input.val(Number.parseFloat(grade).toFixed(2))\n                updateGradeStatus($input, \"saved\")\n\n                // Clear the saved status after a few seconds\n                setTimeout(() => {\n                  updateGradeStatus($input, \"\")\n                }, 3000)\n              }\n            }\n          }\n\n          // Clear any pending grades since we just applied auto-grades\n          pendingGrades.clear()\n          updatePendingGradesDisplay()\n\n          Str.get_string(\"auto_grade_success\", \"local_trustgrade\", response.graded_count)\n            .then((successText) => {\n              Notification.addNotification({\n                message: successText,\n                type: \"success\",\n              })\n            })\n            .catch(() => {\n              // Fallback if string loading fails\n              Notification.addNotification({\n                message: response.graded_count + \" students auto-graded based on quiz scores\",\n                type: \"success\",\n              })\n            })\n        } else {\n          Str.get_string(\"auto_grade_error\", \"local_trustgrade\")\n            .then((errorText) => {\n              Notification.addNotification({\n                message: response.message || errorText.replace(\"{$a}\", \"students\"),\n                type: \"error\",\n              })\n            })\n            .catch(() => {\n              Notification.addNotification({\n                message: response.message || \"Error auto-grading students\",\n                type: \"error\",\n              })\n            })\n        }\n      })\n      .fail(Notification.exception)\n      .always(() => {\n        Str.get_string(\"auto_grade_button_text\", \"local_trustgrade\")\n          .then((buttonText) => {\n            $button.prop(\"disabled\", false).html('<i class=\"fa fa-magic\"></i> ' + buttonText)\n          })\n          .catch(() => {\n            $button.prop(\"disabled\", false).html('<i class=\"fa fa-magic\"></i> Auto-grade by Quiz Score')\n          })\n      })\n  }\n\n  /**\n   * Load current grades from server\n   */\n  function loadCurrentGrades() {\n    var userids = []\n    $(\".grade-input\").each(function () {\n      userids.push($(this).data(\"userid\"))\n    })\n\n    if (userids.length === 0) {\n      return\n    }\n\n    var promise = Ajax.call([\n      {\n        methodname: \"local_trustgrade_get_current_grades\",\n        args: {\n          cmid: cmid,\n          userids: userids,\n        },\n      },\n    ])[0]\n\n    promise\n      .done((response) => {\n        if (response.success && response.grades) {\n          // Parse the JSON grades string\n          var gradesObj = {}\n          try {\n            gradesObj = JSON.parse(response.grades)\n          } catch (e) {\n            console.error(\"Error parsing grades JSON:\", e)\n            return\n          }\n\n          for (var userid in gradesObj) {\n            if (gradesObj.hasOwnProperty(userid)) {\n              var $input = $(\"#grade_\" + userid)\n              var grade = gradesObj[userid]\n              if (grade !== null && grade !== undefined) {\n                $input.val(Number.parseFloat(grade).toFixed(2))\n                updateGradeStatus($input, \"saved\")\n              }\n            }\n          }\n        }\n      })\n      .fail(() => {\n        // Silently fail - grades will show as empty\n      })\n  }\n\n  /**\n   * Update grade status icon\n   * @param {jQuery} $input Input element\n   * @param {string} status Status: pending, saving, saved, error\n   */\n  function updateGradeStatus($input, status) {\n    var $icon = $input.siblings(\".input-group-append\").find(\".grade-status-icon\")\n\n    $icon.removeClass(\"text-warning text-primary text-success text-danger\")\n    $icon.html(\"\")\n\n    switch (status) {\n      case \"pending\":\n        $icon.addClass(\"text-warning\").html('<i class=\"fa fa-clock-o\"></i>')\n        $icon.attr(\"title\", \"Grade pending save\")\n        break\n      case \"saving\":\n        $icon.addClass(\"text-primary\").html('<i class=\"fa fa-spinner fa-spin\"></i>')\n        $icon.attr(\"title\", \"Saving grade...\")\n        break\n      case \"saved\":\n        $icon.addClass(\"text-success\").html('<i class=\"fa fa-check\"></i>')\n        $icon.attr(\"title\", \"Grade saved\")\n        break\n      case \"error\":\n        $icon.addClass(\"text-danger\").html('<i class=\"fa fa-exclamation-triangle\"></i>')\n        $icon.attr(\"title\", \"Error saving grade\")\n        break\n    }\n  }\n\n  /**\n   * Update pending grades count display\n   */\n  function updatePendingGradesDisplay() {\n    var count = pendingGrades.size\n    var $counter = $(\"#pending-grades-count\")\n    var $bulkButton = $(\"#bulk-save-grades\")\n\n    if (count > 0) {\n      $counter.text(count + \" unsaved change\" + (count === 1 ? \"\" : \"s\")).show()\n      $bulkButton.show()\n    } else {\n      $counter.hide()\n      $bulkButton.hide()\n    }\n  }\n\n  return {\n    init: init,\n  }\n})\n"],"names":["define","$","Ajax","Notification","M","Str","ModalFactory","ModalEvents","saveTimeout","cmid","pendingGrades","Map","saveGrade","userid","grade","$input","updateGradeStatus","call","methodname","args","done","response","success","delete","updatePendingGradesDisplay","formatted_grade","val","addNotification","message","type","fail","ex","exception","clearAllGrades","$button","prop","html","each","this","clear","always","autoGradeByQuizScore","get_string","then","loadingText","catch","gradesObj","grades","JSON","parse","e","errorText","console","error","hasOwnProperty","Number","parseFloat","toFixed","setTimeout","graded_count","successText","replace","buttonText","status","$icon","siblings","find","removeClass","addClass","attr","count","size","$counter","$bulkButton","text","show","hide","init","courseModuleId","document","on","data","set","clearTimeout","has","which","gradesObject","forEach","stringify","saved_count","savePendingGrades","create","types","SAVE_CANCEL","title","body","modal","setSaveButtonText","getRoot","save","confirm","userids","push","length","loadCurrentGrades"],"mappings":"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"}