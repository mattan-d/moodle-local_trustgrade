{"version":3,"file":"question_editor.min.js","sources":["../src/question_editor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n\nvar define = window.define\nvar M = window.M\n\ndefine([\"jquery\", \"core/ajax\", \"core/notification\", \"core/str\", \"core/templates\"], (\n  $,\n  Ajax,\n  Notification,\n  Str,\n  Templates,\n) => {\n  var QuestionEditor = {\n    cmid: 0,\n    initialized: false,\n\n    init: function (cmid) {\n      this.cmid = cmid || 0\n      if (this.initialized) return\n      this.bindEvents()\n      this.initialized = true\n    },\n\n    bindEvents: () => {\n      $(document).off(\"click.questioneditor\").off(\"change.questioneditor\")\n\n      $(document).on(\"click.questioneditor\", \"#add-new-question-btn\", (e) => {\n        e.preventDefault()\n        QuestionEditor.addNewQuestion()\n      })\n\n      $(document).on(\"click.questioneditor\", \".edit-question-btn\", function (e) {\n        e.preventDefault()\n        var questionItem = $(this).closest(\".editable-question-item\")\n        QuestionEditor.enterEditMode(questionItem)\n      })\n      $(document).on(\"click.questioneditor\", \".cancel-edit-btn\", function (e) {\n        e.preventDefault()\n        var questionItem = $(this).closest(\".editable-question-item\")\n        QuestionEditor.exitEditMode(questionItem)\n      })\n      $(document).on(\"click.questioneditor\", \".save-question-btn\", function (e) {\n        e.preventDefault()\n        var questionItem = $(this).closest(\".editable-question-item\")\n        QuestionEditor.saveQuestion(questionItem)\n      })\n      $(document).on(\"click.questioneditor\", \".delete-question-btn\", function (e) {\n        e.preventDefault()\n        var $button = $(this)\n        if ($button.prop(\"disabled\")) return\n        $button.prop(\"disabled\", true)\n        var questionItem = $button.closest(\".editable-question-item\")\n        setTimeout(() => QuestionEditor.deleteQuestion(questionItem, $button), 100)\n      })\n      $(document).on(\"change.questioneditor\", \".question-type-input\", function (e) {\n        var questionItem = $(this).closest(\".editable-question-item\")\n        var questionIndex = questionItem.data(\"question-index\")\n        QuestionEditor.updateOptionsSection($(this).val(), questionIndex)\n      })\n    },\n\n    enterEditMode: (questionItem) => {\n      questionItem.find(\".question-display-mode\").hide()\n      questionItem.find(\".question-edit-mode\").show()\n    },\n\n    exitEditMode: (questionItem) => {\n      questionItem.find(\".question-edit-mode\").hide()\n      questionItem.find(\".question-display-mode\").show()\n    },\n\n    saveQuestion: (questionItem) => {\n      const questionIndex = questionItem.data(\"question-index\")\n      const cmid = questionItem.data(\"cmid\")\n\n      // Build new JSON shape\n      const questionType = questionItem.find(\".question-type-input\").val()\n      const questionText = questionItem.find(\".question-text-input\").val()\n      const points = Number.parseInt(questionItem.find(\".question-points-input\").val(), 10)\n      const blooms = questionItem.find(\".question-blooms-input\").val() || undefined\n\n      const questionData = {\n        id: Number.parseInt(questionItem.data(\"question-id\") || 0, 10) || undefined,\n        type: questionType,\n        text: questionText,\n        options: [],\n        metadata: {\n          points: isNaN(points) ? 0 : points,\n          ...(blooms ? { blooms_level: blooms } : {}),\n        },\n      }\n\n      // Build options per type\n      if (questionType === \"multiple_choice\") {\n        // Each .option-row contains:\n        // - radio.correct-answer-radio (is_correct)\n        // - input.option-text-input (text)\n        // - textarea.option-explanation-input (explanation)\n        questionItem.find(\".option-row\").each(function () {\n          const $row = $(this)\n          const isCorrect = $row.find(\".correct-answer-radio\").is(\":checked\")\n          const optText = $row.find(\".option-text-input\").val() || \"\"\n          const optExplanation = $row.find(\".option-explanation-input\").val() || \"\"\n          questionData.options.push({\n            text: optText,\n            is_correct: !!isCorrect,\n            explanation: optExplanation,\n          })\n        })\n      } else if (questionType === \"true_false\") {\n        // Expect two radios named tf_answer_{index} with values \"true\"/\"false\"\n        const selectedVal = questionItem.find(`input[name^=\"tf_answer_${questionIndex}\"]:checked`).val()\n        // True row\n        const $trueRow = questionItem.find('.true-false-options .tf-row[data-value=\"true\"]')\n        const trueText = $trueRow.find(\".tf-label\").text() || \"True\"\n        const trueExpl = $trueRow.find(\".option-explanation-input\").val() || \"\"\n        // False row\n        const $falseRow = questionItem.find('.true-false-options .tf-row[data-value=\"false\"]')\n        const falseText = $falseRow.find(\".tf-label\").text() || \"False\"\n        const falseExpl = $falseRow.find(\".option-explanation-input\").val() || \"\"\n        questionData.options.push(\n          { text: trueText, is_correct: selectedVal === \"true\", explanation: trueExpl },\n          { text: falseText, is_correct: selectedVal === \"false\", explanation: falseExpl },\n        )\n      } else if (questionType === \"short_answer\") {\n        // Minimum structure: one empty option with explanation field (optional for compatibility)\n        questionData.options = []\n      }\n\n      // Validation\n      if (!questionData.text || !questionData.text.trim()) {\n        Str.get_string(\"question_text_required\", \"local_trustgrade\").then((message) =>\n          Notification.addNotification({ message, type: \"error\" }),\n        )\n        return\n      }\n      if (questionType === \"multiple_choice\") {\n        const anyTextMissing = questionData.options.some((opt) => !(opt.text || \"\").trim())\n        if (anyTextMissing) {\n          Str.get_string(\"all_options_required\", \"local_trustgrade\").then((message) =>\n            Notification.addNotification({ message, type: \"error\" }),\n          )\n          return\n        }\n        const anyCorrect = questionData.options.some((opt) => opt.is_correct)\n        if (!anyCorrect) {\n          Str.get_string(\"correct_answer_required\", \"local_trustgrade\").then((message) =>\n            Notification.addNotification({ message, type: \"error\" }),\n          )\n          return\n        }\n      }\n\n      var $saveBtn = questionItem.find(\".save-question-btn\")\n      $saveBtn.prop(\"disabled\", true)\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_save_question\",\n          args: {\n            cmid: cmid,\n            question_index: questionIndex,\n            question_data: JSON.stringify(questionData),\n          },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            QuestionEditor.updateQuestionDisplay(questionItem, questionData)\n            QuestionEditor.exitEditMode(questionItem)\n            Str.get_string(\"question_saved_success\", \"local_trustgrade\").then((message) =>\n              Notification.addNotification({ message: message, type: \"success\" }),\n            )\n          } else {\n            Notification.addNotification({ message: response.error || \"Failed to save question.\", type: \"error\" })\n          }\n        })\n        .fail(Notification.exception)\n        .always(() => $saveBtn.prop(\"disabled\", false))\n    },\n\n    deleteQuestion: (questionItem, $button) => {\n      Promise.all([\n        Str.get_string(\"confirm_delete_question_title\", \"local_trustgrade\"),\n        Str.get_string(\"confirm_delete_question_message\", \"local_trustgrade\"),\n        Str.get_string(\"delete\", \"core\"),\n        Str.get_string(\"cancel\", \"core\"),\n      ]).then((strings) => {\n        Notification.confirm(\n          strings[0],\n          strings[1],\n          strings[2],\n          strings[3],\n          () => {\n            var questionIndex = questionItem.data(\"question-index\")\n            var cmid = questionItem.data(\"cmid\")\n            QuestionEditor.performDelete(questionItem, questionIndex, cmid)\n          },\n          () => $button.prop(\"disabled\", false),\n        )\n      })\n    },\n\n    performDelete: (questionItem, questionIndex, cmid) => {\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_delete_question\",\n          args: { cmid: cmid, question_index: questionIndex },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            questionItem.fadeOut(300, function () {\n              $(this).remove()\n              QuestionEditor.reindexQuestions()\n            })\n            Str.get_string(\"question_deleted_success\", \"local_trustgrade\").then((message) =>\n              Notification.addNotification({ message: message, type: \"success\" }),\n            )\n          } else {\n            Notification.addNotification({ message: response.error || \"Failed to delete question.\", type: \"error\" })\n          }\n        })\n        .fail(Notification.exception)\n    },\n\n    updateQuestionDisplay: (questionItem, questionData) => {\n      var displayMode = questionItem.find(\".question-display-mode .question-content\")\n      Promise.all([\n        Str.get_string(\"question\", \"local_trustgrade\"),\n        Str.get_string(\"correct\", \"local_trustgrade\"),\n        Str.get_string(\"explanation\", \"local_trustgrade\"),\n        Str.get_string(\"points\", \"local_trustgrade\"),\n      ]).then((strings) => {\n        const [qStr, correctStr, explStr, pointsStr] = strings\n        let html = `<p><strong>Type:</strong> ${String(questionData.type || \"\").replace(\"_\", \" \")}</p>`\n        if (questionData.metadata && (questionData.metadata.points != null || questionData.metadata.blooms_level)) {\n          const pts = questionData.metadata.points != null ? `${pointsStr}: ${questionData.metadata.points}` : \"\"\n          const bloom = questionData.metadata.blooms_level ? ` | Bloom's: ${questionData.metadata.blooms_level}` : \"\"\n          html += `<p>${pts}${bloom}</p>`\n        }\n        html += `<p><strong>${qStr}:</strong> ${questionData.text || \"\"}</p>`\n\n        if (Array.isArray(questionData.options) && questionData.options.length > 0) {\n          html += \"<p><strong>Options:</strong></p><ul>\"\n          questionData.options.forEach((opt) => {\n            const correctBadge = opt.is_correct ? ` <strong>(${correctStr})</strong>` : \"\"\n            const safeOptText = opt.text || \"\"\n            const safeExpl = opt.explanation\n              ? ` <div class=\"option-explanation\"><em>${explStr}:</em> ${opt.explanation}</div>`\n              : \"\"\n            html += `<li>${safeOptText}${correctBadge}${safeExpl}</li>`\n          })\n          html += \"</ul>\"\n        }\n\n        displayMode.html(html)\n      })\n    },\n\n    updateOptionsSection: (questionType, questionIndex) => {\n      var optionsSection = $(\n        `.editable-question-item[data-question-index=\"${questionIndex}\"] .question-options-section`,\n      )\n      if (questionType === \"multiple_choice\") {\n        const context = {\n          questionIndex: questionIndex,\n          options: [\n            { index: 0, text: \"\", isCorrect: true, explanation: \"\", optionLabel: \"Option A\" },\n            { index: 1, text: \"\", isCorrect: false, explanation: \"\", optionLabel: \"Option B\" },\n            { index: 2, text: \"\", isCorrect: false, explanation: \"\", optionLabel: \"Option C\" },\n            { index: 3, text: \"\", isCorrect: false, explanation: \"\", optionLabel: \"Option D\" },\n          ],\n        }\n        Templates.render(\"local_trustgrade/question_multiple_choice_options\", context)\n          .then((html) => optionsSection.html(html))\n          .catch(Notification.exception)\n      } else if (questionType === \"true_false\") {\n        const context = {\n          questionIndex: questionIndex,\n          trueSelected: true,\n          falseSelected: false,\n          trueExplanation: \"\",\n          falseExplanation: \"\",\n        }\n        Templates.render(\"local_trustgrade/question_true_false_options\", context)\n          .then((html) => optionsSection.html(html))\n          .catch(Notification.exception)\n      } else {\n        optionsSection.html(\"\")\n      }\n    },\n\n    generateMultipleChoiceOptions: (questionIndex) => {\n      console.warn(\"generateMultipleChoiceOptions is deprecated, use updateOptionsSection instead\")\n      return \"\"\n    },\n\n    generateTrueFalseOptions: (questionIndex) => {\n      console.warn(\"generateTrueFalseOptions is deprecated, use updateOptionsSection instead\")\n      return Promise.resolve(\"\")\n    },\n\n    reindexQuestions: () => {\n      Str.get_string(\"question\", \"local_trustgrade\").then((str) => {\n        $(\"#question-bank-container .editable-question-item\").each(function (index) {\n          $(this).data(\"question-index\", index)\n          $(this)\n            .find(\".question-header h5\")\n            .text(`${str} ${index + 1}`)\n        })\n      })\n    },\n\n    reinitialize: function (cmid) {\n      this.initialized = false\n      this.init(cmid)\n    },\n\n    addNewQuestion: () => {\n      const questionCount = $(\"#question-bank-container .editable-question-item\").length\n      const newIndex = questionCount\n\n      // Create a blank question object\n      const blankQuestion = {\n        id: 0,\n        type: \"multiple_choice\",\n        text: \"\",\n        options: [\n          { text: \"\", is_correct: true, explanation: \"\" },\n          { text: \"\", is_correct: false, explanation: \"\" },\n          { text: \"\", is_correct: false, explanation: \"\" },\n          { text: \"\", is_correct: false, explanation: \"\" },\n        ],\n        metadata: {\n          points: 10,\n          blooms_level: \"\",\n        },\n      }\n\n      const editFormContext = QuestionEditor.prepareEditFormContext(blankQuestion, newIndex)\n\n      Templates.render(\"local_trustgrade/question_edit_form\", editFormContext)\n        .then((editFormHtml) => {\n          const context = {\n            index: newIndex,\n            cmid: QuestionEditor.cmid,\n            questionNumber: newIndex + 1,\n            editFormHtml: editFormHtml,\n          }\n          return Templates.render(\"local_trustgrade/question_new_item\", context)\n        })\n        .then((html) => {\n          // Insert before the add button section\n          $(\".add-question-section\").before(html)\n\n          const newQuestionItem = $(`.editable-question-item[data-question-index=\"${newIndex}\"]`)\n          QuestionEditor.updateOptionsSection(\"multiple_choice\", newIndex)\n\n          // Automatically enter edit mode for the new question\n          QuestionEditor.enterEditMode(newQuestionItem)\n\n          // Focus on the question text input\n          newQuestionItem.find(\".question-text-input\").focus()\n        })\n        .catch(Notification.exception)\n    },\n\n    generateEditForm: (question, index) => {\n      const context = QuestionEditor.prepareEditFormContext(question, index)\n      return Templates.render(\"local_trustgrade/question_edit_form\", context).catch((err) => {\n        Notification.exception(err)\n        return \"\"\n      })\n    },\n\n    prepareEditFormContext: (question, index) => {\n      const type = question.type || \"multiple_choice\"\n      const text = question.text || \"\"\n      const metadata = question.metadata || {}\n      const points = metadata.points || 10\n      const blooms = metadata.blooms_level || \"\"\n\n      const bloomsLevels = [\n        \"\",\n        \"blooms_remember\",\n        \"blooms_understand\",\n        \"blooms_apply\",\n        \"blooms_analyze\",\n        \"blooms_evaluate\",\n        \"blooms_create\",\n      ]\n\n      // Get language strings for Bloom's levels\n      const bloomsPromises = bloomsLevels.map((level) => {\n        if (level === \"\") return Promise.resolve(\"-\")\n        return Str.get_string(level, \"local_trustgrade\").catch(() => level.replace(\"blooms_\", \"\"))\n      })\n\n      return Promise.all(bloomsPromises).then((bloomsLabels) => {\n        const bloomsOptions = bloomsLevels.map((level, i) => ({\n          value:\n            level === \"\"\n              ? \"\"\n              : level.replace(\"blooms_\", \"\").charAt(0).toUpperCase() + level.replace(\"blooms_\", \"\").slice(1),\n          label: bloomsLabels[i],\n          selected:\n            blooms ===\n            (level === \"\"\n              ? \"\"\n              : level.replace(\"blooms_\", \"\").charAt(0).toUpperCase() + level.replace(\"blooms_\", \"\").slice(1)),\n        }))\n\n        const options = []\n        for (let i = 0; i < 4; i++) {\n          const opt = question.options[i] || { text: \"\", is_correct: i === 0, explanation: \"\" }\n          options.push({\n            index: i,\n            text: opt.text,\n            isCorrect: opt.is_correct,\n            explanation: opt.explanation,\n            optionLabel: `Option ${String.fromCharCode(65 + i)}`,\n          })\n        }\n\n        return {\n          index: index,\n          text: text,\n          type: type,\n          points: points,\n          bloomsLevel: blooms,\n          bloomsOptions: bloomsOptions,\n          isMultipleChoice: type === \"multiple_choice\",\n          isTrueFalse: type === \"true_false\",\n          isShortAnswer: type === \"short_answer\",\n          options: options,\n        }\n      })\n    },\n  }\n\n  return QuestionEditor\n})\n"],"names":["define","window","M","$","Ajax","Notification","Str","Templates","QuestionEditor","cmid","initialized","init","this","bindEvents","document","off","on","e","preventDefault","addNewQuestion","questionItem","closest","enterEditMode","exitEditMode","saveQuestion","$button","prop","setTimeout","deleteQuestion","questionIndex","data","updateOptionsSection","val","find","hide","show","questionType","questionText","points","Number","parseInt","blooms","undefined","questionData","id","type","text","options","metadata","isNaN","blooms_level","each","$row","isCorrect","is","optText","optExplanation","push","is_correct","explanation","selectedVal","$trueRow","trueText","trueExpl","$falseRow","falseText","falseExpl","trim","some","opt","get_string","then","message","addNotification","$saveBtn","call","methodname","args","question_index","question_data","JSON","stringify","done","response","success","updateQuestionDisplay","error","fail","exception","always","Promise","all","strings","confirm","performDelete","fadeOut","remove","reindexQuestions","displayMode","qStr","correctStr","explStr","pointsStr","html","String","replace","pts","bloom","Array","isArray","length","forEach","correctBadge","safeOptText","safeExpl","optionsSection","context","index","optionLabel","render","catch","trueSelected","falseSelected","trueExplanation","falseExplanation","generateMultipleChoiceOptions","console","warn","generateTrueFalseOptions","resolve","str","reinitialize","newIndex","editFormContext","prepareEditFormContext","editFormHtml","questionNumber","before","newQuestionItem","focus","generateEditForm","question","err","bloomsLevels","bloomsPromises","map","level","bloomsLabels","bloomsOptions","i","value","charAt","toUpperCase","slice","label","selected","fromCharCode","bloomsLevel","isMultipleChoice","isTrueFalse","isShortAnswer"],"mappings":"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"}