{"version":3,"file":"question_editor.min.js","sources":["../src/question_editor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n\nvar define = window.define\nvar M = window.M\n\ndefine([\"jquery\", \"core/ajax\", \"core/notification\", \"core/str\"], ($, Ajax, Notification, Str) => {\n  var QuestionEditor = {\n    cmid: 0,\n    initialized: false,\n\n    init: function (cmid) {\n      this.cmid = cmid || 0\n      if (this.initialized) return\n      this.bindEvents()\n      this.initialized = true\n    },\n\n    bindEvents: () => {\n      $(document).off(\"click.questioneditor\").off(\"change.questioneditor\")\n      $(document).on(\"click.questioneditor\", \".edit-question-btn\", function (e) {\n        e.preventDefault()\n        var questionItem = $(this).closest(\".editable-question-item\")\n        QuestionEditor.enterEditMode(questionItem)\n      })\n      $(document).on(\"click.questioneditor\", \".cancel-edit-btn\", function (e) {\n        e.preventDefault()\n        var questionItem = $(this).closest(\".editable-question-item\")\n        QuestionEditor.exitEditMode(questionItem)\n      })\n      $(document).on(\"click.questioneditor\", \".save-question-btn\", function (e) {\n        e.preventDefault()\n        var questionItem = $(this).closest(\".editable-question-item\")\n        QuestionEditor.saveQuestion(questionItem)\n      })\n      $(document).on(\"click.questioneditor\", \".delete-question-btn\", function (e) {\n        e.preventDefault()\n        var $button = $(this)\n        if ($button.prop(\"disabled\")) return\n        $button.prop(\"disabled\", true)\n        var questionItem = $button.closest(\".editable-question-item\")\n        setTimeout(() => QuestionEditor.deleteQuestion(questionItem, $button), 100)\n      })\n      $(document).on(\"change.questioneditor\", \".question-type-input\", function (e) {\n        var questionItem = $(this).closest(\".editable-question-item\")\n        var questionIndex = questionItem.data(\"question-index\")\n        QuestionEditor.updateOptionsSection($(this).val(), questionIndex)\n      })\n    },\n\n    enterEditMode: (questionItem) => {\n      questionItem.find(\".question-display-mode\").hide()\n      questionItem.find(\".question-edit-mode\").show()\n    },\n\n    exitEditMode: (questionItem) => {\n      questionItem.find(\".question-edit-mode\").hide()\n      questionItem.find(\".question-display-mode\").show()\n    },\n\n    saveQuestion: (questionItem) => {\n      const questionIndex = questionItem.data(\"question-index\")\n      const cmid = questionItem.data(\"cmid\")\n\n      // Build new JSON shape\n      const questionType = questionItem.find(\".question-type-input\").val()\n      const questionText = questionItem.find(\".question-text-input\").val()\n      const points = Number.parseInt(questionItem.find(\".question-points-input\").val(), 10)\n      const blooms = questionItem.find(\".question-blooms-input\").val() || undefined\n\n      const questionData = {\n        id: Number.parseInt(questionItem.data(\"question-id\") || 0, 10) || undefined,\n        type: questionType,\n        text: questionText,\n        options: [],\n        metadata: {\n          points: isNaN(points) ? 0 : points,\n          ...(blooms ? { blooms_level: blooms } : {}),\n        },\n      }\n\n      // Build options per type\n      if (questionType === \"multiple_choice\") {\n        // Each .option-row contains:\n        // - radio.correct-answer-radio (is_correct)\n        // - input.option-text-input (text)\n        // - textarea.option-explanation-input (explanation)\n        questionItem.find(\".option-row\").each(function () {\n          const $row = $(this)\n          const isCorrect = $row.find(\".correct-answer-radio\").is(\":checked\")\n          const optText = $row.find(\".option-text-input\").val() || \"\"\n          const optExplanation = $row.find(\".option-explanation-input\").val() || \"\"\n          questionData.options.push({\n            text: optText,\n            is_correct: !!isCorrect,\n            explanation: optExplanation,\n          })\n        })\n      } else if (questionType === \"true_false\") {\n        // Expect two radios named tf_answer_{index} with values \"true\"/\"false\"\n        const selectedVal = questionItem.find(`input[name^=\"tf_answer_${questionIndex}\"]:checked`).val()\n        // True row\n        const $trueRow = questionItem.find('.true-false-options .tf-row[data-value=\"true\"]')\n        const trueText = $trueRow.find(\".tf-label\").text() || \"True\"\n        const trueExpl = $trueRow.find(\".option-explanation-input\").val() || \"\"\n        // False row\n        const $falseRow = questionItem.find('.true-false-options .tf-row[data-value=\"false\"]')\n        const falseText = $falseRow.find(\".tf-label\").text() || \"False\"\n        const falseExpl = $falseRow.find(\".option-explanation-input\").val() || \"\"\n        questionData.options.push(\n          { text: trueText, is_correct: selectedVal === \"true\", explanation: trueExpl },\n          { text: falseText, is_correct: selectedVal === \"false\", explanation: falseExpl },\n        )\n      } else if (questionType === \"short_answer\") {\n        // Minimum structure: one empty option with explanation field (optional for compatibility)\n        questionData.options = []\n      }\n\n      // Validation\n      if (!questionData.text || !questionData.text.trim()) {\n        Str.get_string(\"question_text_required\", \"local_trustgrade\").then((message) =>\n          Notification.addNotification({ message, type: \"error\" }),\n        )\n        return\n      }\n      if (questionType === \"multiple_choice\") {\n        const anyTextMissing = questionData.options.some((opt) => !(opt.text || \"\").trim())\n        if (anyTextMissing) {\n          Str.get_string(\"all_options_required\", \"local_trustgrade\").then((message) =>\n            Notification.addNotification({ message, type: \"error\" }),\n          )\n          return\n        }\n        const anyCorrect = questionData.options.some((opt) => opt.is_correct)\n        if (!anyCorrect) {\n          Str.get_string(\"correct_answer_required\", \"local_trustgrade\").then((message) =>\n            Notification.addNotification({ message, type: \"error\" }),\n          )\n          return\n        }\n      }\n\n      var $saveBtn = questionItem.find(\".save-question-btn\")\n      $saveBtn.prop(\"disabled\", true)\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_save_question\",\n          args: {\n            cmid: cmid,\n            question_index: questionIndex,\n            question_data: JSON.stringify(questionData),\n          },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            QuestionEditor.updateQuestionDisplay(questionItem, questionData)\n            QuestionEditor.exitEditMode(questionItem)\n            Str.get_string(\"question_saved_success\", \"local_trustgrade\").then((message) =>\n              Notification.addNotification({ message: message, type: \"success\" }),\n            )\n          } else {\n            Notification.addNotification({ message: response.error || \"Failed to save question.\", type: \"error\" })\n          }\n        })\n        .fail(Notification.exception)\n        .always(() => $saveBtn.prop(\"disabled\", false))\n    },\n\n    deleteQuestion: (questionItem, $button) => {\n      Promise.all([\n        Str.get_string(\"confirm_delete_question_title\", \"local_trustgrade\"),\n        Str.get_string(\"confirm_delete_question_message\", \"local_trustgrade\"),\n        Str.get_string(\"delete\", \"core\"),\n        Str.get_string(\"cancel\", \"core\"),\n      ]).then((strings) => {\n        Notification.confirm(\n          strings[0],\n          strings[1],\n          strings[2],\n          strings[3],\n          () => {\n            var questionIndex = questionItem.data(\"question-index\")\n            var cmid = questionItem.data(\"cmid\")\n            QuestionEditor.performDelete(questionItem, questionIndex, cmid)\n          },\n          () => $button.prop(\"disabled\", false),\n        )\n      })\n    },\n\n    performDelete: (questionItem, questionIndex, cmid) => {\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_delete_question\",\n          args: { cmid: cmid, question_index: questionIndex },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            questionItem.fadeOut(300, function () {\n              $(this).remove()\n              QuestionEditor.reindexQuestions()\n            })\n            Str.get_string(\"question_deleted_success\", \"local_trustgrade\").then((message) =>\n              Notification.addNotification({ message: message, type: \"success\" }),\n            )\n          } else {\n            Notification.addNotification({ message: response.error || \"Failed to delete question.\", type: \"error\" })\n          }\n        })\n        .fail(Notification.exception)\n    },\n\n    updateQuestionDisplay: (questionItem, questionData) => {\n      var displayMode = questionItem.find(\".question-display-mode .question-content\")\n      Promise.all([\n        Str.get_string(\"question\", \"local_trustgrade\"),\n        Str.get_string(\"correct\", \"local_trustgrade\"),\n        Str.get_string(\"explanation\", \"local_trustgrade\"),\n        Str.get_string(\"points\", \"local_trustgrade\"),\n      ]).then((strings) => {\n        const [qStr, correctStr, explStr, pointsStr] = strings\n        let html = `<p><strong>Type:</strong> ${String(questionData.type || \"\").replace(\"_\", \" \")}</p>`\n        if (questionData.metadata && (questionData.metadata.points != null || questionData.metadata.blooms_level)) {\n          const pts = questionData.metadata.points != null ? `${pointsStr}: ${questionData.metadata.points}` : \"\"\n          const bloom = questionData.metadata.blooms_level ? ` | Bloom's: ${questionData.metadata.blooms_level}` : \"\"\n          html += `<p>${pts}${bloom}</p>`\n        }\n        html += `<p><strong>${qStr}:</strong> ${questionData.text || \"\"}</p>`\n\n        if (Array.isArray(questionData.options) && questionData.options.length > 0) {\n          html += \"<p><strong>Options:</strong></p><ul>\"\n          questionData.options.forEach((opt) => {\n            const correctBadge = opt.is_correct ? ` <strong>(${correctStr})</strong>` : \"\"\n            const safeOptText = opt.text || \"\"\n            const safeExpl = opt.explanation\n              ? ` <div class=\"option-explanation\"><em>${explStr}:</em> ${opt.explanation}</div>`\n              : \"\"\n            html += `<li>${safeOptText}${correctBadge}${safeExpl}</li>`\n          })\n          html += \"</ul>\"\n        }\n\n        displayMode.html(html)\n      })\n    },\n\n    updateOptionsSection: (questionType, questionIndex) => {\n      var optionsSection = $(\n        `.editable-question-item[data-question-index=\"${questionIndex}\"] .question-options-section`,\n      )\n      if (questionType === \"multiple_choice\") {\n        optionsSection.html(QuestionEditor.generateMultipleChoiceOptions(questionIndex))\n      } else if (questionType === \"true_false\") {\n        QuestionEditor.generateTrueFalseOptions(questionIndex).then((html) => optionsSection.html(html))\n      } else {\n        optionsSection.html(\"\")\n      }\n    },\n\n    generateMultipleChoiceOptions: (questionIndex) => {\n      var html = '<div class=\"multiple-choice-options\"><label>Options:</label>'\n      for (var i = 0; i < 4; i++) {\n        html += `<div class=\"option-row\">\n    <div class=\"form-check\">\n      <input class=\"form-check-input correct-answer-radio\" type=\"radio\" name=\"correct_answer_${questionIndex}\" value=\"${i}\" ${i === 0 ? \"checked\" : \"\"}>\n      <input type=\"text\" class=\"form-control option-text-input\" placeholder=\"Option ${String.fromCharCode(65 + i)}\">\n    </div>\n    <div class=\"form-group mt-2\">\n      <label class=\"form-label\">Explanation</label>\n      <textarea class=\"form-control option-explanation-input\" rows=\"2\" placeholder=\"Enter explanation for this option\"></textarea>\n    </div>\n  </div>`\n      }\n      html += \"</div>\"\n      return html\n    },\n\n    generateTrueFalseOptions: (questionIndex) =>\n      Promise.all([\n        Str.get_string(\"correct_answer\", \"local_trustgrade\"),\n        Str.get_string(\"true\", \"local_trustgrade\"),\n        Str.get_string(\"false\", \"local_trustgrade\"),\n        Str.get_string(\"explanation\", \"local_trustgrade\"),\n      ]).then((strings) => {\n        const [correctAns, trueStr, falseStr, explanationStr] = strings\n        return `<div class=\"true-false-options\">\n    <label>${correctAns}:</label>\n    <div class=\"tf-row\" data-value=\"true\">\n      <div class=\"form-check\">\n        <input class=\"form-check-input\" type=\"radio\" name=\"tf_answer_${questionIndex}\" value=\"true\" checked>\n        <label class=\"form-check-label tf-label\">${trueStr}</label>\n      </div>\n      <div class=\"form-group mt-2\">\n        <label class=\"form-label\">${explanationStr}</label>\n        <textarea class=\"form-control option-explanation-input\" rows=\"2\" placeholder=\"${explanationStr} for ${trueStr}\"></textarea>\n      </div>\n    </div>\n    <div class=\"tf-row mt-3\" data-value=\"false\">\n      <div class=\"form-check\">\n        <input class=\"form-check-input\" type=\"radio\" name=\"tf_answer_${questionIndex}\" value=\"false\">\n        <label class=\"form-check-label tf-label\">${falseStr}</label>\n      </div>\n      <div class=\"form-group mt-2\">\n        <label class=\"form-label\">${explanationStr}</label>\n        <textarea class=\"form-control option-explanation-input\" rows=\"2\" placeholder=\"${explanationStr} for ${falseStr}\"></textarea>\n      </div>\n    </div>\n  </div>`\n      }),\n\n    reindexQuestions: () => {\n      Str.get_string(\"question\", \"local_trustgrade\").then((str) => {\n        $(\"#question-bank-container .editable-question-item\").each(function (index) {\n          $(this).data(\"question-index\", index)\n          $(this)\n            .find(\".question-header h5\")\n            .text(`${str} ${index + 1}`)\n        })\n      })\n    },\n\n    reinitialize: function (cmid) {\n      this.initialized = false\n      this.init(cmid)\n    },\n  }\n\n  return QuestionEditor\n})\n"],"names":["define","window","M","$","Ajax","Notification","Str","QuestionEditor","cmid","initialized","init","this","bindEvents","document","off","on","e","preventDefault","questionItem","closest","enterEditMode","exitEditMode","saveQuestion","$button","prop","setTimeout","deleteQuestion","questionIndex","data","updateOptionsSection","val","find","hide","show","questionType","questionText","points","Number","parseInt","blooms","undefined","questionData","id","type","text","options","metadata","isNaN","blooms_level","each","$row","isCorrect","is","optText","optExplanation","push","is_correct","explanation","selectedVal","$trueRow","trueText","trueExpl","$falseRow","falseText","falseExpl","trim","some","opt","get_string","then","message","addNotification","$saveBtn","call","methodname","args","question_index","question_data","JSON","stringify","done","response","success","updateQuestionDisplay","error","fail","exception","always","Promise","all","strings","confirm","performDelete","fadeOut","remove","reindexQuestions","displayMode","qStr","correctStr","explStr","pointsStr","html","String","replace","pts","bloom","Array","isArray","length","forEach","correctBadge","safeOptText","safeExpl","optionsSection","generateMultipleChoiceOptions","generateTrueFalseOptions","i","fromCharCode","correctAns","trueStr","falseStr","explanationStr","str","index","reinitialize"],"mappings":"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"}
