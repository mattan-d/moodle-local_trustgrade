{"version":3,"file":"question_editor.min.js","sources":["../src/question_editor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n\nvar define = window.define\nvar M = window.M\n\ndefine([\"jquery\", \"core/ajax\", \"core/notification\", \"core/str\"], ($, Ajax, Notification, Str) => {\n  var QuestionEditor = {\n    cmid: 0,\n    initialized: false,\n\n    init: function (cmid) {\n      this.cmid = cmid || 0\n      if (this.initialized) return\n      this.bindEvents()\n      this.initialized = true\n    },\n\n    bindEvents: () => {\n      $(document).off(\"click.questioneditor\").off(\"change.questioneditor\")\n      $(document).on(\"click.questioneditor\", \".edit-question-btn\", function (e) {\n        e.preventDefault()\n        var questionItem = $(this).closest(\".editable-question-item\")\n        QuestionEditor.enterEditMode(questionItem)\n      })\n      $(document).on(\"click.questioneditor\", \".cancel-edit-btn\", function (e) {\n        e.preventDefault()\n        var questionItem = $(this).closest(\".editable-question-item\")\n        QuestionEditor.exitEditMode(questionItem)\n      })\n      $(document).on(\"click.questioneditor\", \".save-question-btn\", function (e) {\n        e.preventDefault()\n        var questionItem = $(this).closest(\".editable-question-item\")\n        QuestionEditor.saveQuestion(questionItem)\n      })\n      $(document).on(\"click.questioneditor\", \".delete-question-btn\", function (e) {\n        e.preventDefault()\n        var $button = $(this)\n        if ($button.prop(\"disabled\")) return\n        $button.prop(\"disabled\", true)\n        var questionItem = $button.closest(\".editable-question-item\")\n        setTimeout(() => QuestionEditor.deleteQuestion(questionItem, $button), 100)\n      })\n      $(document).on(\"change.questioneditor\", \".question-type-input\", function (e) {\n        var questionItem = $(this).closest(\".editable-question-item\")\n        var questionIndex = questionItem.data(\"question-index\")\n        QuestionEditor.updateOptionsSection($(this).val(), questionIndex)\n      })\n    },\n\n    enterEditMode: (questionItem) => {\n      questionItem.find(\".question-display-mode\").hide()\n      questionItem.find(\".question-edit-mode\").show()\n    },\n\n    exitEditMode: (questionItem) => {\n      questionItem.find(\".question-edit-mode\").hide()\n      questionItem.find(\".question-display-mode\").show()\n    },\n\n    saveQuestion: (questionItem) => {\n      var questionIndex = questionItem.data(\"question-index\")\n      var cmid = questionItem.data(\"cmid\")\n      var questionData = {\n        question: questionItem.find(\".question-text-input\").val(),\n        type: questionItem.find(\".question-type-input\").val(),\n        difficulty: questionItem.find(\".question-difficulty-input\").val(),\n        points: Number.parseInt(questionItem.find(\".question-points-input\").val()),\n        explanation: questionItem.find(\".question-explanation-input\").val(),\n      }\n\n      if (questionData.type === \"multiple_choice\") {\n        questionData.options = []\n        questionItem.find(\".option-text-input\").each(function () {\n          questionData.options.push($(this).val())\n        })\n        questionData.correct_answer = Number.parseInt(questionItem.find(\".correct-answer-radio:checked\").val() || 0)\n      } else if (questionData.type === \"true_false\") {\n        questionData.correct_answer = questionItem.find('input[name^=\"tf_answer_\"]:checked').val() === \"true\"\n      }\n\n      if (!questionData.question.trim()) {\n        Str.get_string(\"question_text_required\", \"local_trustgrade\").then((message) =>\n          Notification.addNotification({ message: message, type: \"error\" }),\n        )\n        return\n      }\n      if (questionData.type === \"multiple_choice\" && questionData.options.some((opt) => !opt.trim())) {\n        Str.get_string(\"all_options_required\", \"local_trustgrade\").then((message) =>\n          Notification.addNotification({ message: message, type: \"error\" }),\n        )\n        return\n      }\n\n      var $saveBtn = questionItem.find(\".save-question-btn\")\n      $saveBtn.prop(\"disabled\", true)\n\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_save_question\",\n          args: {\n            cmid: cmid,\n            question_index: questionIndex,\n            question_data: JSON.stringify(questionData),\n          },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            QuestionEditor.updateQuestionDisplay(questionItem, questionData)\n            QuestionEditor.exitEditMode(questionItem)\n            Str.get_string(\"question_saved_success\", \"local_trustgrade\").then((message) =>\n              Notification.addNotification({ message: message, type: \"success\" }),\n            )\n          } else {\n            Notification.addNotification({ message: response.error || \"Failed to save question.\", type: \"error\" })\n          }\n        })\n        .fail(Notification.exception)\n        .always(() => $saveBtn.prop(\"disabled\", false))\n    },\n\n    deleteQuestion: (questionItem, $button) => {\n      Promise.all([\n        Str.get_string(\"confirm_delete_question_title\", \"local_trustgrade\"),\n        Str.get_string(\"confirm_delete_question_message\", \"local_trustgrade\"),\n        Str.get_string(\"delete\", \"core\"),\n        Str.get_string(\"cancel\", \"core\"),\n      ]).then((strings) => {\n        Notification.confirm(\n          strings[0],\n          strings[1],\n          strings[2],\n          strings[3],\n          () => {\n            var questionIndex = questionItem.data(\"question-index\")\n            var cmid = questionItem.data(\"cmid\")\n            QuestionEditor.performDelete(questionItem, questionIndex, cmid)\n          },\n          () => $button.prop(\"disabled\", false),\n        )\n      })\n    },\n\n    performDelete: (questionItem, questionIndex, cmid) => {\n      var promises = Ajax.call([\n        {\n          methodname: \"local_trustgrade_delete_question\",\n          args: { cmid: cmid, question_index: questionIndex },\n        },\n      ])\n\n      promises[0]\n        .done((response) => {\n          if (response.success) {\n            questionItem.fadeOut(300, function () {\n              $(this).remove()\n              QuestionEditor.reindexQuestions()\n            })\n            Str.get_string(\"question_deleted_success\", \"local_trustgrade\").then((message) =>\n              Notification.addNotification({ message: message, type: \"success\" }),\n            )\n          } else {\n            Notification.addNotification({ message: response.error || \"Failed to delete question.\", type: \"error\" })\n          }\n        })\n        .fail(Notification.exception)\n    },\n\n    updateQuestionDisplay: (questionItem, questionData) => {\n      var displayMode = questionItem.find(\".question-display-mode .question-content\")\n      Promise.all([\n        Str.get_string(\"question\", \"local_trustgrade\"),\n        Str.get_string(\"correct\", \"local_trustgrade\"),\n        Str.get_string(\"explanation\", \"local_trustgrade\"),\n      ]).then((strings) => {\n        var html = `<p><strong>Type:</strong> ${questionData.type.replace(\"_\", \" \")}</p>\n                    <p><strong>Difficulty:</strong> ${questionData.difficulty}</p>\n                    <p><strong>Points:</strong> ${questionData.points}</p>\n                    <p><strong>${strings[0]}:</strong> ${questionData.question}</p>`\n        if (questionData.options && questionData.options.length > 0) {\n          html += \"<p><strong>Options:</strong></p><ul>\"\n          questionData.options.forEach((option, index) => {\n            var isCorrect = questionData.correct_answer === index ? ` <strong>(${strings[1]})</strong>` : \"\"\n            html += `<li>${option}${isCorrect}</li>`\n          })\n          html += \"</ul>\"\n        }\n        if (questionData.explanation) {\n          html += `<p><strong>${strings[2]}:</strong> ${questionData.explanation}</p>`\n        }\n        displayMode.html(html)\n      })\n    },\n\n    updateOptionsSection: (questionType, questionIndex) => {\n      var optionsSection = $(\n        `.editable-question-item[data-question-index=\"${questionIndex}\"] .question-options-section`,\n      )\n      if (questionType === \"multiple_choice\") {\n        optionsSection.html(QuestionEditor.generateMultipleChoiceOptions(questionIndex))\n      } else if (questionType === \"true_false\") {\n        QuestionEditor.generateTrueFalseOptions(questionIndex).then((html) => optionsSection.html(html))\n      } else {\n        optionsSection.html(\"\")\n      }\n    },\n\n    generateMultipleChoiceOptions: (questionIndex) => {\n      var html = '<div class=\"multiple-choice-options\"><label>Options:</label>'\n      for (var i = 0; i < 4; i++) {\n        html += `<div class=\"option-row\"><div class=\"form-check\">\n                   <input class=\"form-check-input correct-answer-radio\" type=\"radio\" name=\"correct_answer_${questionIndex}\" value=\"${i}\" ${i === 0 ? \"checked\" : \"\"}>\n                   <input type=\"text\" class=\"form-control option-text-input\" placeholder=\"Option ${String.fromCharCode(65 + i)}\">\n                 </div></div>`\n      }\n      html += \"</div>\"\n      return html\n    },\n\n    generateTrueFalseOptions: (questionIndex) =>\n      Promise.all([\n        Str.get_string(\"correct_answer\", \"local_trustgrade\"),\n        Str.get_string(\"true\", \"local_trustgrade\"),\n        Str.get_string(\"false\", \"local_trustgrade\"),\n      ]).then((strings) => {\n        return `<div class=\"true-false-options\"><label>${strings[0]}:</label>\n                  <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"radio\" name=\"tf_answer_${questionIndex}\" value=\"true\" checked>\n                    <label class=\"form-check-label\">${strings[1]}</label>\n                  </div>\n                  <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"radio\" name=\"tf_answer_${questionIndex}\" value=\"false\">\n                    <label class=\"form-check-label\">${strings[2]}</label>\n                  </div>\n                </div>`\n      }),\n\n    reindexQuestions: () => {\n      Str.get_string(\"question\", \"local_trustgrade\").then((str) => {\n        $(\"#question-bank-container .editable-question-item\").each(function (index) {\n          $(this).data(\"question-index\", index)\n          $(this)\n            .find(\".question-header h5\")\n            .text(`${str} ${index + 1}`)\n        })\n      })\n    },\n\n    reinitialize: function (cmid) {\n      this.initialized = false\n      this.init(cmid)\n    },\n  }\n\n  return QuestionEditor\n})\n"],"names":["define","window","M","$","Ajax","Notification","Str","QuestionEditor","cmid","initialized","init","this","bindEvents","document","off","on","e","preventDefault","questionItem","closest","enterEditMode","exitEditMode","saveQuestion","$button","prop","setTimeout","deleteQuestion","questionIndex","data","updateOptionsSection","val","find","hide","show","questionData","question","type","difficulty","points","Number","parseInt","explanation","options","each","push","correct_answer","trim","some","opt","get_string","then","message","addNotification","$saveBtn","call","methodname","args","question_index","question_data","JSON","stringify","done","response","success","updateQuestionDisplay","error","fail","exception","always","Promise","all","strings","confirm","performDelete","fadeOut","remove","reindexQuestions","displayMode","html","replace","length","forEach","option","index","isCorrect","questionType","optionsSection","generateMultipleChoiceOptions","generateTrueFalseOptions","i","String","fromCharCode","str","text","reinitialize"],"mappings":"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"}
